CCS PCH C Compiler, Version 4.114, 93460303               24-Aug-17 00:37

               Filename: C:\Users\Rohit\Music\ahoysysprog\pic26k20_tft_lcd\ili9325_pic18F26K20\main.lst

               ROM used: 7064 bytes (11%)
                         Largest free fragment is 57640
               RAM used: 12 (0%) at main() level
                         70 (2%) worst case
               Stack:    5 locations

*
0000:  GOTO   0810
.................... #include <18F26K20.h> 
.................... //////// Standard Header file for the PIC18F26K20 device //////////////// 
.................... #device PIC18F26K20 
.................... #list 
....................  
.................... #DEVICE  ICD=TRUE 
.................... #FUSES HS,NOWDT,NOPUT,NOPROTECT 
.................... #use delay(internal = 32000000) 
*
0004:  CLRF   FEA
0006:  MOVLW  18
0008:  MOVWF  FE9
000A:  MOVF   FEF,W
000C:  BZ    0028
000E:  MOVLW  0A
0010:  MOVWF  01
0012:  CLRF   00
0014:  DECFSZ 00,F
0016:  BRA    0014
0018:  DECFSZ 01,F
001A:  BRA    0012
001C:  MOVLW  5F
001E:  MOVWF  00
0020:  DECFSZ 00,F
0022:  BRA    0020
0024:  DECFSZ FEF,F
0026:  BRA    000E
0028:  RETLW  00
.................... #use rs232(baud = 9600,xmit=PIN_C6,rcv=PIN_C7) 
.................... #include "library\library.h" 
....................  
.................... #include "register.h" 
.................... //control registers of ILI9325. 
....................  
.................... #define START_OSC          0x00 
.................... #define DRIV_OUT_CTRL      0x01 
.................... #define DRIV_WAV_CTRL      0x02 
.................... #define ENTRY_MOD          0x03 
.................... #define RESIZE_CTRL        0x04 
.................... #define DISP_CTRL1         0x07 
.................... #define DISP_CTRL2         0x08 
.................... #define DISP_CTRL3         0x09 
.................... #define DISP_CTRL4         0x0A 
.................... #define RGB_DISP_IF_CTRL1  0x0C 
.................... #define FRM_MARKER_POS     0x0D 
.................... #define RGB_DISP_IF_CTRL2  0x0F 
.................... #define POW_CTRL1          0x10 
.................... #define POW_CTRL2          0x11 
.................... #define POW_CTRL3          0x12 
.................... #define POW_CTRL4          0x13 
.................... #define GRAM_HOR_AD        0x20 
.................... #define GRAM_VER_AD        0x21 
.................... #define RW_GRAM            0x22 
.................... #define POW_CTRL7          0x29 
.................... #define FRM_RATE_COL_CTRL  0x2B 
.................... #define GAMMA_CTRL1        0x30 
.................... #define GAMMA_CTRL2        0x31 
.................... #define GAMMA_CTRL3        0x32 
.................... #define GAMMA_CTRL4        0x35 
.................... #define GAMMA_CTRL5        0x36 
.................... #define GAMMA_CTRL6        0x37 
.................... #define GAMMA_CTRL7        0x38 
.................... #define GAMMA_CTRL8        0x39 
.................... #define GAMMA_CTRL9        0x3C 
.................... #define GAMMA_CTRL10       0x3D 
.................... #define HOR_START_AD       0x50 
.................... #define HOR_END_AD         0x51 
.................... #define VER_START_AD       0x52 
.................... #define VER_END_AD         0x53 
.................... #define GATE_SCAN_CTRL1    0x60 
.................... #define GATE_SCAN_CTRL2    0x61 
.................... #define GATE_SCAN_CTRL3    0x6A 
.................... #define PART_IMG1_DISP_POS 0x80 
.................... #define PART_IMG1_START_AD 0x81 
.................... #define PART_IMG1_END_AD   0x82 
.................... #define PART_IMG2_DISP_POS 0x83 
.................... #define PART_IMG2_START_AD 0x84 
.................... #define PART_IMG2_END_AD   0x85 
.................... #define PANEL_IF_CTRL1     0x90 
.................... #define PANEL_IF_CTRL2     0x92 
.................... #define PANEL_IF_CTRL3     0x93 
.................... #define PANEL_IF_CTRL4     0x95 
.................... #define PANEL_IF_CTRL5     0x97 
.................... #define PANEL_IF_CTRL6     0x98 
....................  
.................... //LCD_D[0:7] are connected to portA 
.................... //PINS connected 
.................... #define LCD_RST PIN_C0 
.................... #define LCD_CS PIN_C1 
.................... #define LCD_RS PIN_C2 
.................... #define LCD_WR PIN_C3 
.................... #define LCD_RD PIN_C4 
....................  
....................  
.................... #include "bangothic16x16.h" 
....................  
....................      ///generated using dot factory v0.1.4 char width 42 and height 31 
....................      //Bangothic md. 
....................    ROM char ahoy_buff[] ={    
....................    0x00, 0x00, 0x7F, 0x80, 0x00, 0x00, //                  ########                  
....................    0x00, 0x00, 0x7F, 0x80, 0x00, 0x00, //                  ########                  
....................    0x00, 0x00, 0xFF, 0xC0, 0x00, 0x00, //                 ##########                 
....................    0x00, 0x01, 0xFF, 0xC0, 0x00, 0x00, //                ###########                 
....................    0x00, 0x01, 0xFF, 0xE0, 0x00, 0x00, //                ############                
....................    0x00, 0x03, 0xFF, 0xE0, 0x00, 0x00, //               #############                
....................    0x00, 0x03, 0xF7, 0xF0, 0x00, 0x00, //               ###### #######               
....................    0x00, 0x07, 0xF7, 0xF8, 0x00, 0x00, //              ####### ########              
....................    0x00, 0x07, 0xE3, 0xF8, 0x00, 0x00, //              ######   #######              
....................    0x00, 0x0F, 0xE3, 0xFC, 0x00, 0x00, //             #######   ########             
....................    0x00, 0x0F, 0xC1, 0xFC, 0x00, 0x00, //             ######     #######             
....................    0x00, 0x1F, 0xC1, 0xFE, 0x00, 0x00, //            #######     ########            
....................    0x00, 0x3F, 0x80, 0xFE, 0x00, 0x00, //           #######       #######            
....................    0x00, 0x3F, 0x80, 0xFF, 0x00, 0x00, //           #######       ########           
....................    0x00, 0x7F, 0x00, 0x7F, 0x80, 0x00, //          #######         ########          
....................    0x00, 0x7F, 0x00, 0x7F, 0x80, 0x00, //          #######         ########          
....................    0x00, 0xFE, 0x00, 0x3F, 0xC0, 0x00, //         #######           ########         
....................    0x00, 0xFE, 0x00, 0x1F, 0xC0, 0x00, //         #######            #######         
....................    0x01, 0xFC, 0x00, 0x1F, 0xE0, 0x00, //        #######             ########        
....................    0x03, 0xFF, 0xFF, 0xFF, 0xE0, 0x00, //       #############################        
....................    0x03, 0xFF, 0xFF, 0xFF, 0xF0, 0x00, //       ##############################       
....................    0x07, 0xFF, 0xFF, 0xFF, 0xF8, 0x00, //      ################################      
....................    0x07, 0xFF, 0xFF, 0xFF, 0xF8, 0x00, //      ################################      
....................    0x0F, 0xFF, 0xFF, 0xFF, 0xFC, 0x00, //     ##################################     
....................    0x0F, 0xFF, 0xFF, 0xFF, 0xFC, 0x00, //     ##################################     
....................    0x1F, 0xC0, 0x00, 0x01, 0xFE, 0x00, //    #######                     ########    
....................    0x1F, 0xC0, 0x00, 0x01, 0xFE, 0x00, //    #######                     ########    
....................    0x3F, 0x80, 0x00, 0x00, 0xFF, 0x00, //   #######                       ########   
....................    0x7F, 0x80, 0x00, 0x00, 0xFF, 0x80, //  ########                       #########  
....................    0x7F, 0x00, 0x00, 0x00, 0x7F, 0x80, //  #######                         ########  
....................    0xFE, 0x00, 0x00, 0x00, 0x3F, 0xC0, // #######                           ######## 
....................     
....................     
....................    0x3F, 0x80, 0x00, 0x00, 0xFE, 0x00, //   #######                       #######    
....................    0x3F, 0x80, 0x00, 0x00, 0xFE, 0x00, //   #######                       #######    
....................    0x3F, 0x80, 0x00, 0x00, 0xFE, 0x00, //   #######                       #######    
....................    0x3F, 0x80, 0x00, 0x00, 0xFE, 0x00, //   #######                       #######    
....................    0x3F, 0x80, 0x00, 0x00, 0xFE, 0x00, //   #######                       #######    
....................    0x3F, 0x80, 0x00, 0x00, 0xFE, 0x00, //   #######                       #######    
....................    0x3F, 0x80, 0x00, 0x00, 0xFE, 0x00, //   #######                       #######    
....................    0x3F, 0x80, 0x00, 0x00, 0xFE, 0x00, //   #######                       #######    
....................    0x3F, 0x80, 0x00, 0x00, 0xFE, 0x00, //   #######                       #######    
....................    0x3F, 0x80, 0x00, 0x00, 0xFE, 0x00, //   #######                       #######    
....................    0x3F, 0x80, 0x00, 0x00, 0xFE, 0x00, //   #######                       #######    
....................    0x3F, 0x80, 0x00, 0x00, 0xFE, 0x00, //   #######                       #######    
....................    0x3F, 0xFF, 0xFF, 0xFF, 0xFE, 0x00, //   #####################################    
....................    0x3F, 0xFF, 0xFF, 0xFF, 0xFE, 0x00, //   #####################################    
....................    0x3F, 0xFF, 0xFF, 0xFF, 0xFE, 0x00, //   #####################################    
....................    0x3F, 0xFF, 0xFF, 0xFF, 0xFE, 0x00, //   #####################################    
....................    0x3F, 0xFF, 0xFF, 0xFF, 0xFE, 0x00, //   #####################################    
....................    0x3F, 0xFF, 0xFF, 0xFF, 0xFE, 0x00, //   #####################################    
....................    0x3F, 0x80, 0x00, 0x00, 0xFE, 0x00, //   #######                       #######    
....................    0x3F, 0x80, 0x00, 0x00, 0xFE, 0x00, //   #######                       #######    
....................    0x3F, 0x80, 0x00, 0x00, 0xFE, 0x00, //   #######                       #######    
....................    0x3F, 0x80, 0x00, 0x00, 0xFE, 0x00, //   #######                       #######    
....................    0x3F, 0x80, 0x00, 0x00, 0xFE, 0x00, //   #######                       #######    
....................    0x3F, 0x80, 0x00, 0x00, 0xFE, 0x00, //   #######                       #######    
....................    0x3F, 0x80, 0x00, 0x00, 0xFE, 0x00, //   #######                       #######    
....................    0x3F, 0x80, 0x00, 0x00, 0xFE, 0x00, //   #######                       #######    
....................    0x3F, 0x80, 0x00, 0x00, 0xFE, 0x00, //   #######                       #######    
....................    0x3F, 0x80, 0x00, 0x00, 0xFE, 0x00, //   #######                       #######    
....................    0x3F, 0x80, 0x00, 0x00, 0xFE, 0x00, //   #######                       #######    
....................    0x3F, 0x80, 0x00, 0x00, 0xFE, 0x00, //   #######                       #######    
....................    0x3F, 0x80, 0x00, 0x00, 0xFE, 0x00, //   #######                       #######    
....................  
....................     
....................    0x0F, 0xFF, 0xFF, 0xFF, 0xE0, 0x00, //     ###############################        
....................    0x1F, 0xFF, 0xFF, 0xFF, 0xF8, 0x00, //    ##################################      
....................    0x3F, 0xFF, 0xFF, 0xFF, 0xFC, 0x00, //   ####################################     
....................    0x3F, 0xFF, 0xFF, 0xFF, 0xFC, 0x00, //   ####################################     
....................    0x7F, 0xFF, 0xFF, 0xFF, 0xFE, 0x00, //  ######################################    
....................    0x7F, 0xFF, 0xFF, 0xFF, 0xFE, 0x00, //  ######################################    
....................    0x7F, 0x00, 0x00, 0x00, 0xFE, 0x00, //  #######                        #######    
....................    0x7F, 0x00, 0x00, 0x00, 0xFE, 0x00, //  #######                        #######    
....................    0x7F, 0x00, 0x00, 0x00, 0xFE, 0x00, //  #######                        #######    
....................    0x7F, 0x00, 0x00, 0x00, 0xFE, 0x00, //  #######                        #######    
....................    0x7F, 0x00, 0x00, 0x00, 0xFE, 0x00, //  #######                        #######    
....................    0x7F, 0x00, 0x00, 0x00, 0xFE, 0x00, //  #######                        #######    
....................    0x7F, 0x00, 0x00, 0x00, 0xFE, 0x00, //  #######                        #######    
....................    0x7F, 0x00, 0x00, 0x00, 0xFE, 0x00, //  #######                        #######    
....................    0x7F, 0x00, 0x00, 0x00, 0xFE, 0x00, //  #######                        #######    
....................    0x7F, 0x00, 0x00, 0x00, 0xFE, 0x00, //  #######                        #######    
....................    0x7F, 0x00, 0x00, 0x00, 0xFE, 0x00, //  #######                        #######    
....................    0x7F, 0x00, 0x00, 0x00, 0xFE, 0x00, //  #######                        #######    
....................    0x7F, 0x00, 0x00, 0x00, 0xFE, 0x00, //  #######                        #######    
....................    0x7F, 0x00, 0x00, 0x00, 0xFE, 0x00, //  #######                        #######    
....................    0x7F, 0x00, 0x00, 0x00, 0xFE, 0x00, //  #######                        #######    
....................    0x7F, 0x00, 0x00, 0x00, 0xFE, 0x00, //  #######                        #######    
....................    0x7F, 0x00, 0x00, 0x00, 0xFE, 0x00, //  #######                        #######    
....................    0x7F, 0x00, 0x00, 0x00, 0xFE, 0x00, //  #######                        #######    
....................    0x7F, 0x00, 0x00, 0x00, 0xFE, 0x00, //  #######                        #######    
....................    0x7F, 0xFF, 0xFF, 0xFF, 0xFE, 0x00, //  ######################################    
....................    0x7F, 0xFF, 0xFF, 0xFF, 0xFE, 0x00, //  ######################################    
....................    0x7F, 0xFF, 0xFF, 0xFF, 0xFE, 0x00, //  ######################################    
....................    0x3F, 0xFF, 0xFF, 0xFF, 0xFC, 0x00, //   ####################################     
....................    0x1F, 0xFF, 0xFF, 0xFF, 0xF8, 0x00, //    ##################################      
....................    0x0F, 0xFF, 0xFF, 0xFF, 0xF0, 0x00, //     ################################       
....................  
....................    // @558 'S' (42 pixels wide) 
....................    0x00, 0x7F, 0xFF, 0xFF, 0x80, 0x00, //          ########################          
....................    0x01, 0xFF, 0xFF, 0xFF, 0xE0, 0x00, //        ############################        
....................    0x03, 0xFF, 0xFF, 0xFF, 0xF0, 0x00, //       ##############################       
....................    0x03, 0xFF, 0xFF, 0xFF, 0xF0, 0x00, //       ##############################       
....................    0x07, 0xFF, 0xFF, 0xFF, 0xF8, 0x00, //      ################################      
....................    0x07, 0xFF, 0xFF, 0xFF, 0xF8, 0x00, //      ################################      
....................    0x07, 0xE0, 0x00, 0x01, 0xF8, 0x00, //      ######                    ######      
....................    0x07, 0xE0, 0x00, 0x01, 0xF8, 0x00, //      ######                    ######      
....................    0x07, 0xE0, 0x00, 0x01, 0xF0, 0x00, //      ######                    #####       
....................    0x07, 0xE0, 0x00, 0x01, 0x80, 0x00, //      ######                    ##          
....................    0x07, 0xE0, 0x00, 0x00, 0x00, 0x00, //      ######                                
....................    0x07, 0xE0, 0x00, 0x00, 0x00, 0x00, //      ######                                
....................    0x07, 0xFF, 0xFF, 0xFF, 0xC0, 0x00, //      #############################         
....................    0x07, 0xFF, 0xFF, 0xFF, 0xF0, 0x00, //      ###############################       
....................    0x07, 0xFF, 0xFF, 0xFF, 0xF8, 0x00, //      ################################      
....................    0x03, 0xFF, 0xFF, 0xFF, 0xFC, 0x00, //       ################################     
....................    0x03, 0xFF, 0xFF, 0xFF, 0xFC, 0x00, //       ################################     
....................    0x00, 0xFF, 0xFF, 0xFF, 0xFC, 0x00, //         ##############################     
....................    0x00, 0x00, 0x00, 0x00, 0xFC, 0x00, //                                 ######     
....................    0x00, 0x00, 0x00, 0x00, 0xFC, 0x00, //                                 ######     
....................    0x00, 0x00, 0x00, 0x00, 0xFC, 0x00, //                                 ######     
....................    0x01, 0x80, 0x00, 0x00, 0xFC, 0x00, //        ##                       ######     
....................    0x1F, 0x80, 0x00, 0x00, 0xFC, 0x00, //    ######                       ######     
....................    0x1F, 0x80, 0x00, 0x00, 0xFC, 0x00, //    ######                       ######     
....................    0x1F, 0x80, 0x00, 0x00, 0xFC, 0x00, //    ######                       ######     
....................    0x1F, 0xFF, 0xFF, 0xFF, 0xFC, 0x00, //    ###################################     
....................    0x1F, 0xFF, 0xFF, 0xFF, 0xFC, 0x00, //    ###################################     
....................    0x0F, 0xFF, 0xFF, 0xFF, 0xF8, 0x00, //     #################################      
....................    0x0F, 0xFF, 0xFF, 0xFF, 0xF8, 0x00, //     #################################      
....................    0x07, 0xFF, 0xFF, 0xFF, 0xF0, 0x00, //      ###############################       
....................    0x01, 0xFF, 0xFF, 0xFF, 0xC0, 0x00, //        ###########################         
....................  
....................    // @744 'Y' (42 pixels wide) 
....................    0x3F, 0xF0, 0x00, 0x00, 0xFF, 0x80, //   ##########                    #########  
....................    0x1F, 0xF8, 0x00, 0x01, 0xFF, 0x00, //    ##########                  #########   
....................    0x0F, 0xFC, 0x00, 0x03, 0xFE, 0x00, //     ##########                #########    
....................    0x07, 0xFE, 0x00, 0x07, 0xFC, 0x00, //      ##########              #########     
....................    0x03, 0xFE, 0x00, 0x07, 0xF8, 0x00, //       #########              ########      
....................    0x01, 0xFF, 0x00, 0x0F, 0xF0, 0x00, //        #########            ########       
....................    0x00, 0xFF, 0x80, 0x1F, 0xE0, 0x00, //         #########          ########        
....................    0x00, 0x7F, 0xC0, 0x3F, 0xC0, 0x00, //          #########        ########         
....................    0x00, 0x3F, 0xE0, 0x7F, 0x80, 0x00, //           #########      ########          
....................    0x00, 0x1F, 0xF0, 0xFF, 0x00, 0x00, //            #########    ########           
....................    0x00, 0x0F, 0xF9, 0xFE, 0x00, 0x00, //             #########  ########            
....................    0x00, 0x07, 0xFF, 0xFC, 0x00, 0x00, //              #################             
....................    0x00, 0x03, 0xFF, 0xF8, 0x00, 0x00, //               ###############              
....................    0x00, 0x01, 0xFF, 0xF0, 0x00, 0x00, //                #############               
....................    0x00, 0x00, 0xFF, 0xE0, 0x00, 0x00, //                 ###########                
....................    0x00, 0x00, 0xFF, 0xC0, 0x00, 0x00, //                 ##########                 
....................    0x00, 0x00, 0x7F, 0x80, 0x00, 0x00, //                  ########                  
....................    0x00, 0x00, 0x3F, 0x80, 0x00, 0x00, //                   #######                  
....................    0x00, 0x00, 0x3F, 0x80, 0x00, 0x00, //                   #######                  
....................    0x00, 0x00, 0x3F, 0x80, 0x00, 0x00, //                   #######                  
....................    0x00, 0x00, 0x3F, 0x80, 0x00, 0x00, //                   #######                  
....................    0x00, 0x00, 0x3F, 0x80, 0x00, 0x00, //                   #######                  
....................    0x00, 0x00, 0x3F, 0x80, 0x00, 0x00, //                   #######                  
....................    0x00, 0x00, 0x3F, 0x80, 0x00, 0x00, //                   #######                  
....................    0x00, 0x00, 0x3F, 0x80, 0x00, 0x00, //                   #######                  
....................    0x00, 0x00, 0x3F, 0x80, 0x00, 0x00, //                   #######                  
....................    0x00, 0x00, 0x3F, 0x80, 0x00, 0x00, //                   #######                  
....................    0x00, 0x00, 0x3F, 0x80, 0x00, 0x00, //                   #######                  
....................    0x00, 0x00, 0x3F, 0x80, 0x00, 0x00, //                   #######                  
....................    0x00, 0x00, 0x3F, 0x80, 0x00, 0x00, //                   #######                  
....................    0x00, 0x00, 0x3F, 0x80, 0x00, 0x00, //                   #######                  
....................  
....................     
....................     
.................... }; 
....................  
....................  
.................... ROM char ffonts[]={ 
....................  
....................    0x00, 0x0F, 0xC0, 0x00, //             ######              
....................    0x00, 0x3F, 0xF0, 0x00, //           ##########            
....................    0x00, 0x7F, 0xF8, 0x00, //          ############           
....................    0x00, 0x7F, 0xFC, 0x00, //          #############          
....................    0x00, 0xF8, 0x7C, 0x00, //         #####    #####          
....................    0x00, 0xF8, 0x7C, 0x00, //         #####    #####          
....................    0x01, 0xF0, 0x3E, 0x00, //        #####      #####         
....................    0x01, 0xF0, 0x3E, 0x00, //        #####      #####         
....................    0x01, 0xF0, 0x3E, 0x00, //        #####      #####         
....................    0x01, 0xF0, 0x3E, 0x00, //        #####      #####         
....................    0x01, 0xF0, 0x3E, 0x00, //        #####      #####         
....................    0x01, 0xF0, 0x3E, 0x00, //        #####      #####         
....................    0x01, 0xF0, 0x3E, 0x00, //        #####      #####         
....................    0x01, 0xF0, 0x3E, 0x00, //        #####      #####         
....................    0x01, 0xF0, 0x3E, 0x00, //        #####      #####         
....................    0x01, 0xF0, 0x3E, 0x00, //        #####      #####         
....................    0x01, 0xF0, 0x3E, 0x00, //        #####      #####         
....................    0x00, 0xF8, 0x7C, 0x00, //         #####    #####          
....................    0x00, 0xF8, 0xFC, 0x00, //         #####   ######          
....................    0x00, 0xFF, 0xF8, 0x00, //         #############           
....................    0x00, 0x7F, 0xF8, 0x00, //          ############           
....................    0x00, 0x3F, 0xF0, 0x00, //           ##########            
....................    0x00, 0x0F, 0xC0, 0x00, //             ######              
....................    0x00, 0x00, 0x00, 0x00, //                                 
....................    0x00, 0x00, 0x00, 0x00, //                                 
....................    0x00, 0x00, 0x00, 0x00, //                                 
....................    0x00, 0x00, 0x00, 0x00, //   
....................     
....................     
....................     
....................    /* @108 '1' (31 pixels wide) */ 
....................    0x00, 0x03, 0xE0, 0x00, //               #####             
....................    0x00, 0x0F, 0xE0, 0x00, //             #######             
....................    0x00, 0x1F, 0xE0, 0x00, //            ########             
....................    0x00, 0x7F, 0xE0, 0x00, //          ##########             
....................    0x00, 0x7B, 0xE0, 0x00, //          #### #####             
....................    0x00, 0x63, 0xE0, 0x00, //          ##   #####             
....................    0x00, 0x03, 0xE0, 0x00, //               #####             
....................    0x00, 0x03, 0xE0, 0x00, //               #####             
....................    0x00, 0x03, 0xE0, 0x00, //               #####             
....................    0x00, 0x03, 0xE0, 0x00, //               #####             
....................    0x00, 0x03, 0xE0, 0x00, //               #####             
....................    0x00, 0x03, 0xE0, 0x00, //               #####             
....................    0x00, 0x03, 0xE0, 0x00, //               #####             
....................    0x00, 0x03, 0xE0, 0x00, //               #####             
....................    0x00, 0x03, 0xE0, 0x00, //               #####             
....................    0x00, 0x03, 0xE0, 0x00, //               #####             
....................    0x00, 0x03, 0xE0, 0x00, //               #####             
....................    0x00, 0x03, 0xE0, 0x00, //               #####             
....................    0x00, 0x03, 0xE0, 0x00, //               #####             
....................    0x00, 0x7F, 0xFE, 0x00, //          ##############         
....................    0x00, 0x7F, 0xFE, 0x00, //          ##############         
....................    0x00, 0x7F, 0xFE, 0x00, //          ##############         
....................    0x00, 0x7F, 0xFE, 0x00, //          ##############         
....................    0x00, 0x00, 0x00, 0x00, //                                 
....................    0x00, 0x00, 0x00, 0x00, //                                 
....................    0x00, 0x00, 0x00, 0x00, //                                 
....................    0x00, 0x00, 0x00, 0x00, //                                 
....................  
....................    /* @216 '2' (31 pixels wide) */ 
....................    0x00, 0x0F, 0xC0, 0x00, //             ######              
....................    0x00, 0x3F, 0xF0, 0x00, //           ##########            
....................    0x00, 0xFF, 0xF8, 0x00, //         #############           
....................    0x00, 0xFF, 0xFC, 0x00, //         ##############          
....................    0x00, 0xE0, 0xFC, 0x00, //         ###     ######          
....................    0x00, 0xC0, 0x7C, 0x00, //         ##       #####          
....................    0x00, 0x00, 0x7C, 0x00, //                  #####          
....................    0x00, 0x00, 0x7C, 0x00, //                  #####          
....................    0x00, 0x00, 0x7C, 0x00, //                  #####          
....................    0x00, 0x00, 0xF8, 0x00, //                 #####           
....................    0x00, 0x00, 0xF8, 0x00, //                 #####           
....................    0x00, 0x01, 0xF0, 0x00, //                #####            
....................    0x00, 0x03, 0xE0, 0x00, //               #####             
....................    0x00, 0x07, 0xE0, 0x00, //              ######             
....................    0x00, 0x0F, 0xC0, 0x00, //             ######              
....................    0x00, 0x1F, 0x80, 0x00, //            ######               
....................    0x00, 0x3F, 0x00, 0x00, //           ######                
....................    0x00, 0x7E, 0x00, 0x00, //          ######                 
....................    0x00, 0x7C, 0x00, 0x00, //          #####                  
....................    0x00, 0xFF, 0xFE, 0x00, //         ###############         
....................    0x00, 0xFF, 0xFE, 0x00, //         ###############         
....................    0x00, 0xFF, 0xFE, 0x00, //         ###############         
....................    0x00, 0xFF, 0xFE, 0x00, //         ###############         
....................    0x00, 0x00, 0x00, 0x00, //                                 
....................    0x00, 0x00, 0x00, 0x00, //                                 
....................    0x00, 0x00, 0x00, 0x00, //                                 
....................    0x00, 0x00, 0x00, 0x00, //                                 
....................  
....................    /* @324 '3' (31 pixels wide) */ 
....................    0x00, 0x0F, 0xE0, 0x00, //             #######             
....................    0x00, 0x3F, 0xF0, 0x00, //           ##########            
....................    0x00, 0x7F, 0xF8, 0x00, //          ############           
....................    0x00, 0x7F, 0xFC, 0x00, //          #############          
....................    0x00, 0x70, 0xFC, 0x00, //          ###    ######          
....................    0x00, 0x40, 0x7C, 0x00, //          #       #####          
....................    0x00, 0x00, 0x7C, 0x00, //                  #####          
....................    0x00, 0x00, 0x7C, 0x00, //                  #####          
....................    0x00, 0x01, 0xF8, 0x00, //                ######           
....................    0x00, 0x3F, 0xF0, 0x00, //           ##########            
....................    0x00, 0x3F, 0xC0, 0x00, //           ########              
....................    0x00, 0x3F, 0xF8, 0x00, //           ###########           
....................    0x00, 0x3F, 0xFC, 0x00, //           ############          
....................    0x00, 0x00, 0xFC, 0x00, //                 ######          
....................    0x00, 0x00, 0x7E, 0x00, //                  ######         
....................    0x00, 0x00, 0x3E, 0x00, //                   #####         
....................    0x00, 0x00, 0x3E, 0x00, //                   #####         
....................    0x00, 0x00, 0x3E, 0x00, //                   #####         
....................    0x00, 0xC0, 0xFE, 0x00, //         ##      #######         
....................    0x00, 0xFF, 0xFC, 0x00, //         ##############          
....................    0x00, 0xFF, 0xF8, 0x00, //         #############           
....................    0x00, 0xFF, 0xF0, 0x00, //         ############            
....................    0x00, 0x3F, 0xC0, 0x00, //           ########              
....................    0x00, 0x00, 0x00, 0x00, //                                 
....................    0x00, 0x00, 0x00, 0x00, //                                 
....................    0x00, 0x00, 0x00, 0x00, //                                 
....................    0x00, 0x00, 0x00, 0x00, //                                 
....................  
....................    /* @432 '4' (31 pixels wide) */ 
....................    0x00, 0x03, 0xF8, 0x00, //               #######           
....................    0x00, 0x03, 0xF8, 0x00, //               #######           
....................    0x00, 0x07, 0xF8, 0x00, //              ########           
....................    0x00, 0x07, 0xF8, 0x00, //              ########           
....................    0x00, 0x0F, 0xF8, 0x00, //             #########           
....................    0x00, 0x1E, 0xF8, 0x00, //            #### #####           
....................    0x00, 0x1E, 0xF8, 0x00, //            #### #####           
....................    0x00, 0x3C, 0xF8, 0x00, //           ####  #####           
....................    0x00, 0x3C, 0xF8, 0x00, //           ####  #####           
....................    0x00, 0x78, 0xF8, 0x00, //          ####   #####           
....................    0x00, 0x78, 0xF8, 0x00, //          ####   #####           
....................    0x00, 0xF0, 0xF8, 0x00, //         ####    #####           
....................    0x00, 0xF0, 0xF8, 0x00, //         ####    #####           
....................    0x01, 0xE0, 0xF8, 0x00, //        ####     #####           
....................    0x01, 0xFF, 0xFF, 0x00, //        #################        
....................    0x01, 0xFF, 0xFF, 0x00, //        #################        
....................    0x01, 0xFF, 0xFF, 0x00, //        #################        
....................    0x01, 0xFF, 0xFF, 0x00, //        #################        
....................    0x00, 0x00, 0xF8, 0x00, //                 #####           
....................    0x00, 0x00, 0xF8, 0x00, //                 #####           
....................    0x00, 0x00, 0xF8, 0x00, //                 #####           
....................    0x00, 0x00, 0xF8, 0x00, //                 #####           
....................    0x00, 0x00, 0xF8, 0x00, //                 #####           
....................    0x00, 0x00, 0x00, 0x00, //                                 
....................    0x00, 0x00, 0x00, 0x00, //                                 
....................    0x00, 0x00, 0x00, 0x00, //                                 
....................    0x00, 0x00, 0x00, 0x00, //                                 
....................  
....................    /* @540 '5' (31 pixels wide) */ 
....................    0x00, 0x7F, 0xFC, 0x00, //          #############          
....................    0x00, 0x7F, 0xFC, 0x00, //          #############          
....................    0x00, 0x7F, 0xFC, 0x00, //          #############          
....................    0x00, 0x7F, 0xFC, 0x00, //          #############          
....................    0x00, 0x78, 0x00, 0x00, //          ####                   
....................    0x00, 0x78, 0x00, 0x00, //          ####                   
....................    0x00, 0x78, 0x00, 0x00, //          ####                   
....................    0x00, 0x78, 0x00, 0x00, //          ####                   
....................    0x00, 0x7F, 0xE0, 0x00, //          ##########             
....................    0x00, 0x7F, 0xF8, 0x00, //          ############           
....................    0x00, 0x7F, 0xFC, 0x00, //          #############          
....................    0x00, 0x7F, 0xFC, 0x00, //          #############          
....................    0x00, 0x00, 0xFE, 0x00, //                 #######         
....................    0x00, 0x00, 0x3E, 0x00, //                   #####         
....................    0x00, 0x00, 0x3E, 0x00, //                   #####         
....................    0x00, 0x00, 0x3E, 0x00, //                   #####         
....................    0x00, 0x00, 0x3E, 0x00, //                   #####         
....................    0x00, 0x00, 0x7E, 0x00, //                  ######         
....................    0x00, 0xC0, 0xFC, 0x00, //         ##      ######          
....................    0x00, 0xFF, 0xFC, 0x00, //         ##############          
....................    0x00, 0xFF, 0xF8, 0x00, //         #############           
....................    0x00, 0xFF, 0xF0, 0x00, //         ############            
....................    0x00, 0x3F, 0xC0, 0x00, //           ########              
....................    0x00, 0x00, 0x00, 0x00, //                                 
....................    0x00, 0x00, 0x00, 0x00, //                                 
....................    0x00, 0x00, 0x00, 0x00, //                                 
....................    0x00, 0x00, 0x00, 0x00, //                                 
....................  
....................    /* @648 '6' (31 pixels wide) */ 
....................    0x00, 0x03, 0xF8, 0x00, //               #######           
....................    0x00, 0x1F, 0xFC, 0x00, //            ###########          
....................    0x00, 0x3F, 0xFC, 0x00, //           ############          
....................    0x00, 0x7F, 0xFC, 0x00, //          #############          
....................    0x00, 0x7E, 0x0C, 0x00, //          ######     ##          
....................    0x00, 0xF8, 0x00, 0x00, //         #####                   
....................    0x00, 0xF8, 0x00, 0x00, //         #####                   
....................    0x00, 0xF0, 0x00, 0x00, //         ####                    
....................    0x01, 0xF0, 0x00, 0x00, //        #####                    
....................    0x01, 0xF3, 0xF0, 0x00, //        #####  ######            
....................    0x01, 0xFF, 0xF8, 0x00, //        ##############           
....................    0x01, 0xFF, 0xFC, 0x00, //        ###############          
....................    0x01, 0xFF, 0xFE, 0x00, //        ################         
....................    0x01, 0xF8, 0x7E, 0x00, //        ######    ######         
....................    0x01, 0xF0, 0x3E, 0x00, //        #####      #####         
....................    0x01, 0xF0, 0x3E, 0x00, //        #####      #####         
....................    0x01, 0xF0, 0x3E, 0x00, //        #####      #####         
....................    0x01, 0xF8, 0x3E, 0x00, //        ######     #####         
....................    0x00, 0xF8, 0x7C, 0x00, //         #####    #####          
....................    0x00, 0xFF, 0xFC, 0x00, //         ##############          
....................    0x00, 0x7F, 0xF8, 0x00, //          ############           
....................    0x00, 0x3F, 0xF0, 0x00, //           ##########            
....................    0x00, 0x0F, 0xC0, 0x00, //             ######              
....................    0x00, 0x00, 0x00, 0x00, //                                 
....................    0x00, 0x00, 0x00, 0x00, //                                 
....................    0x00, 0x00, 0x00, 0x00, //                                 
....................    0x00, 0x00, 0x00, 0x00, //                                 
....................  
....................    /* @756 '7' (31 pixels wide) */ 
....................    0x01, 0xFF, 0xFC, 0x00, //        ###############          
....................    0x01, 0xFF, 0xFC, 0x00, //        ###############          
....................    0x01, 0xFF, 0xFC, 0x00, //        ###############          
....................    0x01, 0xFF, 0xFC, 0x00, //        ###############          
....................    0x00, 0x00, 0x7C, 0x00, //                  #####          
....................    0x00, 0x00, 0xF8, 0x00, //                 #####           
....................    0x00, 0x00, 0xF8, 0x00, //                 #####           
....................    0x00, 0x01, 0xF0, 0x00, //                #####            
....................    0x00, 0x01, 0xF0, 0x00, //                #####            
....................    0x00, 0x01, 0xE0, 0x00, //                ####             
....................    0x00, 0x03, 0xE0, 0x00, //               #####             
....................    0x00, 0x03, 0xE0, 0x00, //               #####             
....................    0x00, 0x07, 0xC0, 0x00, //              #####              
....................    0x00, 0x07, 0xC0, 0x00, //              #####              
....................    0x00, 0x0F, 0x80, 0x00, //             #####               
....................    0x00, 0x0F, 0x80, 0x00, //             #####               
....................    0x00, 0x1F, 0x00, 0x00, //            #####                
....................    0x00, 0x1F, 0x00, 0x00, //            #####                
....................    0x00, 0x1F, 0x00, 0x00, //            #####                
....................    0x00, 0x3E, 0x00, 0x00, //           #####                 
....................    0x00, 0x3E, 0x00, 0x00, //           #####                 
....................    0x00, 0x7C, 0x00, 0x00, //          #####                  
....................    0x00, 0x7C, 0x00, 0x00, //          #####                  
....................    0x00, 0x00, 0x00, 0x00, //                                 
....................    0x00, 0x00, 0x00, 0x00, //                                 
....................    0x00, 0x00, 0x00, 0x00, //                                 
....................    0x00, 0x00, 0x00, 0x00, //                                 
....................  
....................    /* @864 '8' (31 pixels wide) */ 
....................    0x00, 0x0F, 0xE0, 0x00, //             #######             
....................    0x00, 0x3F, 0xF0, 0x00, //           ##########            
....................    0x00, 0x7F, 0xF8, 0x00, //          ############           
....................    0x00, 0xFF, 0xFC, 0x00, //         ##############          
....................    0x00, 0xFC, 0xFC, 0x00, //         ######  ######          
....................    0x00, 0xF8, 0x7C, 0x00, //         #####    #####          
....................    0x00, 0xF8, 0x7C, 0x00, //         #####    #####          
....................    0x00, 0xF8, 0x7C, 0x00, //         #####    #####          
....................    0x00, 0x7C, 0xF8, 0x00, //          #####  #####           
....................    0x00, 0x7F, 0xF0, 0x00, //          ###########            
....................    0x00, 0x3F, 0xE0, 0x00, //           #########             
....................    0x00, 0x1F, 0xE0, 0x00, //            ########             
....................    0x00, 0x3F, 0xF8, 0x00, //           ###########           
....................    0x00, 0x7C, 0xFC, 0x00, //          #####  ######          
....................    0x00, 0xF8, 0x7E, 0x00, //         #####    ######         
....................    0x01, 0xF0, 0x3E, 0x00, //        #####      #####         
....................    0x01, 0xF0, 0x3E, 0x00, //        #####      #####         
....................    0x01, 0xF0, 0x3E, 0x00, //        #####      #####         
....................    0x01, 0xF8, 0x7E, 0x00, //        ######    ######         
....................    0x01, 0xFF, 0xFC, 0x00, //        ###############          
....................    0x00, 0xFF, 0xFC, 0x00, //         ##############          
....................    0x00, 0x7F, 0xF8, 0x00, //          ############           
....................    0x00, 0x1F, 0xE0, 0x00, //            ########             
....................    0x00, 0x00, 0x00, 0x00, //                                 
....................    0x00, 0x00, 0x00, 0x00, //                                 
....................    0x00, 0x00, 0x00, 0x00, //                                 
....................    0x00, 0x00, 0x00, 0x00, //                                 
....................  
....................    /* @972 '9' (31 pixels wide) */ 
....................    0x00, 0x0F, 0xC0, 0x00, //             ######              
....................    0x00, 0x3F, 0xF0, 0x00, //           ##########            
....................    0x00, 0x7F, 0xF8, 0x00, //          ############           
....................    0x00, 0xFF, 0xFC, 0x00, //         ##############          
....................    0x00, 0xF8, 0x7C, 0x00, //         #####    #####          
....................    0x01, 0xF0, 0x7E, 0x00, //        #####     ######         
....................    0x01, 0xF0, 0x3E, 0x00, //        #####      #####         
....................    0x01, 0xF0, 0x3E, 0x00, //        #####      #####         
....................    0x01, 0xF0, 0x3E, 0x00, //        #####      #####         
....................    0x01, 0xF8, 0x7E, 0x00, //        ######    ######         
....................    0x01, 0xFF, 0xFE, 0x00, //        ################         
....................    0x00, 0xFF, 0xFE, 0x00, //         ###############         
....................    0x00, 0x7F, 0xFE, 0x00, //          ##############         
....................    0x00, 0x3F, 0xBE, 0x00, //           ####### #####         
....................    0x00, 0x00, 0x3E, 0x00, //                   #####         
....................    0x00, 0x00, 0x3C, 0x00, //                   ####          
....................    0x00, 0x00, 0x7C, 0x00, //                  #####          
....................    0x00, 0x00, 0x7C, 0x00, //                  #####          
....................    0x00, 0xC1, 0xF8, 0x00, //         ##     ######           
....................    0x00, 0xFF, 0xF8, 0x00, //         #############           
....................    0x00, 0xFF, 0xF0, 0x00, //         ############            
....................    0x00, 0xFF, 0xE0, 0x00, //         ###########             
....................    0x00, 0x3F, 0x80, 0x00, //           #######               
....................    0x00, 0x00, 0x00, 0x00, //                                 
....................    0x00, 0x00, 0x00, 0x00, //                                 
....................    0x00, 0x00, 0x00, 0x00, //                                 
....................    0x00, 0x00, 0x00, 0x00, //                                 
....................  
....................    /* @1080 'A' (31 pixels wide) */ 
....................    0x00, 0x0F, 0xC0, 0x00, //             ######              
....................    0x00, 0x1F, 0xC0, 0x00, //            #######              
....................    0x00, 0x1F, 0xC0, 0x00, //            #######              
....................    0x00, 0x1F, 0xE0, 0x00, //            ########             
....................    0x00, 0x3D, 0xE0, 0x00, //           #### ####             
....................    0x00, 0x3D, 0xE0, 0x00, //           #### ####             
....................    0x00, 0x3D, 0xF0, 0x00, //           #### #####            
....................    0x00, 0x78, 0xF0, 0x00, //          ####   ####            
....................    0x00, 0x78, 0xF0, 0x00, //          ####   ####            
....................    0x00, 0x78, 0xF8, 0x00, //          ####   #####           
....................    0x00, 0xF8, 0xF8, 0x00, //         #####   #####           
....................    0x00, 0xF0, 0x78, 0x00, //         ####     ####           
....................    0x00, 0xF0, 0x7C, 0x00, //         ####     #####          
....................    0x01, 0xF0, 0x7C, 0x00, //        #####     #####          
....................    0x01, 0xFF, 0xFC, 0x00, //        ###############          
....................    0x01, 0xFF, 0xFE, 0x00, //        ################         
....................    0x03, 0xFF, 0xFE, 0x00, //       #################         
....................    0x03, 0xFF, 0xFE, 0x00, //       #################         
....................    0x03, 0xC0, 0x1F, 0x00, //       ####         #####        
....................    0x07, 0xC0, 0x1F, 0x00, //      #####         #####        
....................    0x07, 0x80, 0x1F, 0x00, //      ####          #####        
....................    0x07, 0x80, 0x0F, 0x80, //      ####           #####       
....................    0x0F, 0x80, 0x0F, 0x80, //     #####           #####       
....................    0x00, 0x00, 0x00, 0x00, //                                 
....................    0x00, 0x00, 0x00, 0x00, //                                 
....................    0x00, 0x00, 0x00, 0x00, //                                 
....................    0x00, 0x00, 0x00, 0x00, //                                 
....................  
....................    /* @1188 'B' (31 pixels wide) */ 
....................    0x01, 0xFF, 0xE0, 0x00, //        ############             
....................    0x01, 0xFF, 0xF8, 0x00, //        ##############           
....................    0x01, 0xFF, 0xFC, 0x00, //        ###############          
....................    0x01, 0xFF, 0xFE, 0x00, //        ################         
....................    0x01, 0xF0, 0x7E, 0x00, //        #####     ######         
....................    0x01, 0xF0, 0x3E, 0x00, //        #####      #####         
....................    0x01, 0xF0, 0x3E, 0x00, //        #####      #####         
....................    0x01, 0xF0, 0x3E, 0x00, //        #####      #####         
....................    0x01, 0xF0, 0x7C, 0x00, //        #####     #####          
....................    0x01, 0xFF, 0xF8, 0x00, //        ##############           
....................    0x01, 0xFF, 0xF0, 0x00, //        #############            
....................    0x01, 0xFF, 0xFC, 0x00, //        ###############          
....................    0x01, 0xFF, 0xFE, 0x00, //        ################         
....................    0x01, 0xF0, 0x7F, 0x00, //        #####     #######        
....................    0x01, 0xF0, 0x1F, 0x00, //        #####       #####        
....................    0x01, 0xF0, 0x1F, 0x00, //        #####       #####        
....................    0x01, 0xF0, 0x1F, 0x00, //        #####       #####        
....................    0x01, 0xF0, 0x1F, 0x00, //        #####       #####        
....................    0x01, 0xF0, 0x3F, 0x00, //        #####      ######        
....................    0x01, 0xFF, 0xFE, 0x00, //        ################         
....................    0x01, 0xFF, 0xFC, 0x00, //        ###############          
....................    0x01, 0xFF, 0xF8, 0x00, //        ##############           
....................    0x01, 0xFF, 0xE0, 0x00, //        ############             
....................    0x00, 0x00, 0x00, 0x00, //                                 
....................    0x00, 0x00, 0x00, 0x00, //                                 
....................    0x00, 0x00, 0x00, 0x00, //                                 
....................    0x00, 0x00, 0x00, 0x00, //                                 
....................  
....................    /* @1296 'C' (31 pixels wide) */ 
....................    0x00, 0x03, 0xF8, 0x00, //               #######           
....................    0x00, 0x0F, 0xFE, 0x00, //             ###########         
....................    0x00, 0x1F, 0xFF, 0x00, //            #############        
....................    0x00, 0x3F, 0xFF, 0x00, //           ##############        
....................    0x00, 0x7E, 0x07, 0x00, //          ######      ###        
....................    0x00, 0xFC, 0x03, 0x00, //         ######        ##        
....................    0x00, 0xF8, 0x00, 0x00, //         #####                   
....................    0x00, 0xF8, 0x00, 0x00, //         #####                   
....................    0x01, 0xF0, 0x00, 0x00, //        #####                    
....................    0x01, 0xF0, 0x00, 0x00, //        #####                    
....................    0x01, 0xF0, 0x00, 0x00, //        #####                    
....................    0x01, 0xF0, 0x00, 0x00, //        #####                    
....................    0x01, 0xF0, 0x00, 0x00, //        #####                    
....................    0x01, 0xF0, 0x00, 0x00, //        #####                    
....................    0x01, 0xF0, 0x00, 0x00, //        #####                    
....................    0x01, 0xF8, 0x00, 0x00, //        ######                   
....................    0x00, 0xF8, 0x00, 0x00, //         #####                   
....................    0x00, 0xFC, 0x03, 0x00, //         ######        ##        
....................    0x00, 0x7E, 0x07, 0x00, //          ######      ###        
....................    0x00, 0x7F, 0xFF, 0x00, //          ###############        
....................    0x00, 0x3F, 0xFF, 0x00, //           ##############        
....................    0x00, 0x1F, 0xFE, 0x00, //            ############         
....................    0x00, 0x03, 0xF8, 0x00, //               #######           
....................    0x00, 0x00, 0x00, 0x00, //                                 
....................    0x00, 0x00, 0x00, 0x00, //                                 
....................    0x00, 0x00, 0x00, 0x00, //                                 
....................    0x00, 0x00, 0x00, 0x00, //                                 
....................  
....................    /* @1404 'D' (31 pixels wide) */ 
....................    0x07, 0xFF, 0x80, 0x00, //      ############               
....................    0x07, 0xFF, 0xE0, 0x00, //      ##############             
....................    0x07, 0xFF, 0xF8, 0x00, //      ################           
....................    0x07, 0xFF, 0xFC, 0x00, //      #################          
....................    0x07, 0xC1, 0xFC, 0x00, //      #####     #######          
....................    0x07, 0xC0, 0x7E, 0x00, //      #####       ######         
....................    0x07, 0xC0, 0x3E, 0x00, //      #####        #####         
....................    0x07, 0xC0, 0x3F, 0x00, //      #####        ######        
....................    0x07, 0xC0, 0x1F, 0x00, //      #####         #####        
....................    0x07, 0xC0, 0x1F, 0x00, //      #####         #####        
....................    0x07, 0xC0, 0x1F, 0x00, //      #####         #####        
....................    0x07, 0xC0, 0x1F, 0x00, //      #####         #####        
....................    0x07, 0xC0, 0x1F, 0x00, //      #####         #####        
....................    0x07, 0xC0, 0x1F, 0x00, //      #####         #####        
....................    0x07, 0xC0, 0x1F, 0x00, //      #####         #####        
....................    0x07, 0xC0, 0x3F, 0x00, //      #####        ######        
....................    0x07, 0xC0, 0x3E, 0x00, //      #####        #####         
....................    0x07, 0xC0, 0x7E, 0x00, //      #####       ######         
....................    0x07, 0xC1, 0xFC, 0x00, //      #####     #######          
....................    0x07, 0xFF, 0xFC, 0x00, //      #################          
....................    0x07, 0xFF, 0xF8, 0x00, //      ################           
....................    0x07, 0xFF, 0xE0, 0x00, //      ##############             
....................    0x07, 0xFF, 0x00, 0x00, //      ###########                
....................    0x00, 0x00, 0x00, 0x00, //                                 
....................    0x00, 0x00, 0x00, 0x00, //                                 
....................    0x00, 0x00, 0x00, 0x00, //                                 
....................    0x00, 0x00, 0x00, 0x00, //                                 
....................  
....................    /* @1512 'E' (31 pixels wide) */ 
....................    0x00, 0xFF, 0xFC, 0x00, //         ##############          
....................    0x00, 0xFF, 0xFC, 0x00, //         ##############          
....................    0x00, 0xFF, 0xFC, 0x00, //         ##############          
....................    0x00, 0xFF, 0xFC, 0x00, //         ##############          
....................    0x00, 0xF8, 0x00, 0x00, //         #####                   
....................    0x00, 0xF8, 0x00, 0x00, //         #####                   
....................    0x00, 0xF8, 0x00, 0x00, //         #####                   
....................    0x00, 0xF8, 0x00, 0x00, //         #####                   
....................    0x00, 0xF8, 0x00, 0x00, //         #####                   
....................    0x00, 0xFF, 0xF8, 0x00, //         #############           
....................    0x00, 0xFF, 0xF8, 0x00, //         #############           
....................    0x00, 0xFF, 0xF8, 0x00, //         #############           
....................    0x00, 0xFF, 0xF8, 0x00, //         #############           
....................    0x00, 0xF8, 0x00, 0x00, //         #####                   
....................    0x00, 0xF8, 0x00, 0x00, //         #####                   
....................    0x00, 0xF8, 0x00, 0x00, //         #####                   
....................    0x00, 0xF8, 0x00, 0x00, //         #####                   
....................    0x00, 0xF8, 0x00, 0x00, //         #####                   
....................    0x00, 0xF8, 0x00, 0x00, //         #####                   
....................    0x00, 0xFF, 0xFC, 0x00, //         ##############          
....................    0x00, 0xFF, 0xFC, 0x00, //         ##############          
....................    0x00, 0xFF, 0xFC, 0x00, //         ##############          
....................    0x00, 0xFF, 0xFC, 0x00, //         ##############          
....................    0x00, 0x00, 0x00, 0x00, //                                 
....................    0x00, 0x00, 0x00, 0x00, //                                 
....................    0x00, 0x00, 0x00, 0x00, //                                 
....................    0x00, 0x00, 0x00, 0x00, //                                 
....................  
....................    /* @1620 'F' (31 pixels wide) */ 
....................    0x00, 0xFF, 0xF8, 0x00, //         #############           
....................    0x00, 0xFF, 0xF8, 0x00, //         #############           
....................    0x00, 0xFF, 0xF8, 0x00, //         #############           
....................    0x00, 0xFF, 0xF8, 0x00, //         #############           
....................    0x00, 0xF8, 0x00, 0x00, //         #####                   
....................    0x00, 0xF8, 0x00, 0x00, //         #####                   
....................    0x00, 0xF8, 0x00, 0x00, //         #####                   
....................    0x00, 0xF8, 0x00, 0x00, //         #####                   
....................    0x00, 0xF8, 0x00, 0x00, //         #####                   
....................    0x00, 0xF8, 0x00, 0x00, //         #####                   
....................    0x00, 0xFF, 0xF0, 0x00, //         ############            
....................    0x00, 0xFF, 0xF8, 0x00, //         #############           
....................    0x00, 0xFF, 0xF8, 0x00, //         #############           
....................    0x00, 0xFF, 0xF0, 0x00, //         ############            
....................    0x00, 0xF8, 0x00, 0x00, //         #####                   
....................    0x00, 0xF8, 0x00, 0x00, //         #####                   
....................    0x00, 0xF8, 0x00, 0x00, //         #####                   
....................    0x00, 0xF8, 0x00, 0x00, //         #####                   
....................    0x00, 0xF8, 0x00, 0x00, //         #####                   
....................    0x00, 0xF8, 0x00, 0x00, //         #####                   
....................    0x00, 0xF8, 0x00, 0x00, //         #####                   
....................    0x00, 0xF8, 0x00, 0x00, //         #####                   
....................    0x00, 0xF8, 0x00, 0x00, //         #####                   
....................    0x00, 0x00, 0x00, 0x00, //                                 
....................    0x00, 0x00, 0x00, 0x00, //                                 
....................    0x00, 0x00, 0x00, 0x00, //                                 
....................    0x00, 0x00, 0x00, 0x00, //                                 
....................  
....................    /* @1728 'G' (31 pixels wide) */ 
....................    0x00, 0x07, 0xF8, 0x00, //              ########           
....................    0x00, 0x3F, 0xFE, 0x00, //           #############         
....................    0x00, 0x7F, 0xFF, 0x00, //          ###############        
....................    0x00, 0xFF, 0xFF, 0x00, //         ################        
....................    0x01, 0xFC, 0x0F, 0x00, //        #######      ####        
....................    0x03, 0xF0, 0x03, 0x00, //       ######          ##        
....................    0x03, 0xF0, 0x00, 0x00, //       ######                    
....................    0x03, 0xE0, 0x00, 0x00, //       #####                     
....................    0x07, 0xC0, 0x00, 0x00, //      #####                      
....................    0x07, 0xC0, 0x00, 0x00, //      #####                      
....................    0x07, 0xC1, 0xFF, 0x00, //      #####     #########        
....................    0x07, 0xC1, 0xFF, 0x00, //      #####     #########        
....................    0x07, 0xC1, 0xFF, 0x00, //      #####     #########        
....................    0x07, 0xC1, 0xFF, 0x00, //      #####     #########        
....................    0x07, 0xC0, 0x1F, 0x00, //      #####         #####        
....................    0x07, 0xE0, 0x1F, 0x00, //      ######        #####        
....................    0x03, 0xE0, 0x1F, 0x00, //       #####        #####        
....................    0x03, 0xF0, 0x1F, 0x00, //       ######       #####        
....................    0x01, 0xFC, 0x1F, 0x00, //        #######     #####        
....................    0x00, 0xFF, 0xFF, 0x00, //         ################        
....................    0x00, 0x7F, 0xFF, 0x00, //          ###############        
....................    0x00, 0x3F, 0xFF, 0x00, //           ##############        
....................    0x00, 0x0F, 0xF8, 0x00, //             #########           
....................    0x00, 0x00, 0x00, 0x00, //                                 
....................    0x00, 0x00, 0x00, 0x00, //                                 
....................    0x00, 0x00, 0x00, 0x00, //                                 
....................    0x00, 0x00, 0x00, 0x00, //                                 
....................  
....................    /* @1836 'H' (31 pixels wide) */ 
....................    0x07, 0xC0, 0x3E, 0x00, //      #####        #####         
....................    0x07, 0xC0, 0x3E, 0x00, //      #####        #####         
....................    0x07, 0xC0, 0x3E, 0x00, //      #####        #####         
....................    0x07, 0xC0, 0x3E, 0x00, //      #####        #####         
....................    0x07, 0xC0, 0x3E, 0x00, //      #####        #####         
....................    0x07, 0xC0, 0x3E, 0x00, //      #####        #####         
....................    0x07, 0xC0, 0x3E, 0x00, //      #####        #####         
....................    0x07, 0xC0, 0x3E, 0x00, //      #####        #####         
....................    0x07, 0xC0, 0x3E, 0x00, //      #####        #####         
....................    0x07, 0xFF, 0xFE, 0x00, //      ##################         
....................    0x07, 0xFF, 0xFE, 0x00, //      ##################         
....................    0x07, 0xFF, 0xFE, 0x00, //      ##################         
....................    0x07, 0xFF, 0xFE, 0x00, //      ##################         
....................    0x07, 0xC0, 0x3E, 0x00, //      #####        #####         
....................    0x07, 0xC0, 0x3E, 0x00, //      #####        #####         
....................    0x07, 0xC0, 0x3E, 0x00, //      #####        #####         
....................    0x07, 0xC0, 0x3E, 0x00, //      #####        #####         
....................    0x07, 0xC0, 0x3E, 0x00, //      #####        #####         
....................    0x07, 0xC0, 0x3E, 0x00, //      #####        #####         
....................    0x07, 0xC0, 0x3E, 0x00, //      #####        #####         
....................    0x07, 0xC0, 0x3E, 0x00, //      #####        #####         
....................    0x07, 0xC0, 0x3E, 0x00, //      #####        #####         
....................    0x07, 0xC0, 0x3E, 0x00, //      #####        #####         
....................    0x00, 0x00, 0x00, 0x00, //                                 
....................    0x00, 0x00, 0x00, 0x00, //                                 
....................    0x00, 0x00, 0x00, 0x00, //                                 
....................    0x00, 0x00, 0x00, 0x00, //                                 
....................  
....................    /* @1944 'I' (31 pixels wide) */ 
....................    0x00, 0x0F, 0x80, 0x00, //             #####               
....................    0x00, 0x0F, 0x80, 0x00, //             #####               
....................    0x00, 0x0F, 0x80, 0x00, //             #####               
....................    0x00, 0x0F, 0x80, 0x00, //             #####               
....................    0x00, 0x0F, 0x80, 0x00, //             #####               
....................    0x00, 0x0F, 0x80, 0x00, //             #####               
....................    0x00, 0x0F, 0x80, 0x00, //             #####               
....................    0x00, 0x0F, 0x80, 0x00, //             #####               
....................    0x00, 0x0F, 0x80, 0x00, //             #####               
....................    0x00, 0x0F, 0x80, 0x00, //             #####               
....................    0x00, 0x0F, 0x80, 0x00, //             #####               
....................    0x00, 0x0F, 0x80, 0x00, //             #####               
....................    0x00, 0x0F, 0x80, 0x00, //             #####               
....................    0x00, 0x0F, 0x80, 0x00, //             #####               
....................    0x00, 0x0F, 0x80, 0x00, //             #####               
....................    0x00, 0x0F, 0x80, 0x00, //             #####               
....................    0x00, 0x0F, 0x80, 0x00, //             #####               
....................    0x00, 0x0F, 0x80, 0x00, //             #####               
....................    0x00, 0x0F, 0x80, 0x00, //             #####               
....................    0x00, 0x0F, 0x80, 0x00, //             #####               
....................    0x00, 0x0F, 0x80, 0x00, //             #####               
....................    0x00, 0x0F, 0x80, 0x00, //             #####               
....................    0x00, 0x0F, 0x80, 0x00, //             #####               
....................    0x00, 0x00, 0x00, 0x00, //                                 
....................    0x00, 0x00, 0x00, 0x00, //                                 
....................    0x00, 0x00, 0x00, 0x00, //                                 
....................    0x00, 0x00, 0x00, 0x00, //                                 
....................  
....................    /* @2052 'J' (31 pixels wide) */ 
....................    0x00, 0x03, 0xE0, 0x00, //               #####             
....................    0x00, 0x03, 0xE0, 0x00, //               #####             
....................    0x00, 0x03, 0xE0, 0x00, //               #####             
....................    0x00, 0x03, 0xE0, 0x00, //               #####             
....................    0x00, 0x03, 0xE0, 0x00, //               #####             
....................    0x00, 0x03, 0xE0, 0x00, //               #####             
....................    0x00, 0x03, 0xE0, 0x00, //               #####             
....................    0x00, 0x03, 0xE0, 0x00, //               #####             
....................    0x00, 0x03, 0xE0, 0x00, //               #####             
....................    0x00, 0x03, 0xE0, 0x00, //               #####             
....................    0x00, 0x03, 0xE0, 0x00, //               #####             
....................    0x00, 0x03, 0xE0, 0x00, //               #####             
....................    0x00, 0x03, 0xE0, 0x00, //               #####             
....................    0x00, 0x03, 0xE0, 0x00, //               #####             
....................    0x00, 0x03, 0xE0, 0x00, //               #####             
....................    0x00, 0x03, 0xE0, 0x00, //               #####             
....................    0x00, 0x03, 0xE0, 0x00, //               #####             
....................    0x00, 0x03, 0xE0, 0x00, //               #####             
....................    0x00, 0x67, 0xE0, 0x00, //          ##  ######             
....................    0x00, 0x7F, 0xE0, 0x00, //          ##########             
....................    0x00, 0x7F, 0xC0, 0x00, //          #########              
....................    0x00, 0x7F, 0x80, 0x00, //          ########               
....................    0x00, 0x3F, 0x00, 0x00, //           ######                
....................    0x00, 0x00, 0x00, 0x00, //                                 
....................    0x00, 0x00, 0x00, 0x00, //                                 
....................    0x00, 0x00, 0x00, 0x00, //                                 
....................    0x00, 0x00, 0x00, 0x00, //                                 
....................  
....................    /* @2160 'K' (31 pixels wide) */ 
....................    0x01, 0xF0, 0x1F, 0x00, //        #####       #####        
....................    0x01, 0xF0, 0x3F, 0x00, //        #####      ######        
....................    0x01, 0xF0, 0x3E, 0x00, //        #####      #####         
....................    0x01, 0xF0, 0x7C, 0x00, //        #####     #####          
....................    0x01, 0xF0, 0xFC, 0x00, //        #####    ######          
....................    0x01, 0xF0, 0xF8, 0x00, //        #####    #####           
....................    0x01, 0xF1, 0xF0, 0x00, //        #####   #####            
....................    0x01, 0xF3, 0xE0, 0x00, //        #####  #####             
....................    0x01, 0xF7, 0xE0, 0x00, //        ##### ######             
....................    0x01, 0xF7, 0xC0, 0x00, //        ##### #####              
....................    0x01, 0xFF, 0x80, 0x00, //        ##########               
....................    0x01, 0xFF, 0xC0, 0x00, //        ###########              
....................    0x01, 0xF7, 0xC0, 0x00, //        ##### #####              
....................    0x01, 0xF7, 0xE0, 0x00, //        ##### ######             
....................    0x01, 0xF3, 0xE0, 0x00, //        #####  #####             
....................    0x01, 0xF1, 0xF0, 0x00, //        #####   #####            
....................    0x01, 0xF1, 0xF8, 0x00, //        #####   ######           
....................    0x01, 0xF0, 0xF8, 0x00, //        #####    #####           
....................    0x01, 0xF0, 0x7C, 0x00, //        #####     #####          
....................    0x01, 0xF0, 0x7E, 0x00, //        #####     ######         
....................    0x01, 0xF0, 0x3E, 0x00, //        #####      #####         
....................    0x01, 0xF0, 0x1F, 0x00, //        #####       #####        
....................    0x01, 0xF0, 0x1F, 0x00, //        #####       #####        
....................    0x00, 0x00, 0x00, 0x00, //                                 
....................    0x00, 0x00, 0x00, 0x00, //                                 
....................    0x00, 0x00, 0x00, 0x00, //                                 
....................    0x00, 0x00, 0x00, 0x00, //                                 
....................  
....................    /* @2268 'L' (31 pixels wide) */ 
....................    0x00, 0x3E, 0x00, 0x00, //           #####                 
....................    0x00, 0x3E, 0x00, 0x00, //           #####                 
....................    0x00, 0x3E, 0x00, 0x00, //           #####                 
....................    0x00, 0x3E, 0x00, 0x00, //           #####                 
....................    0x00, 0x3E, 0x00, 0x00, //           #####                 
....................    0x00, 0x3E, 0x00, 0x00, //           #####                 
....................    0x00, 0x3E, 0x00, 0x00, //           #####                 
....................    0x00, 0x3E, 0x00, 0x00, //           #####                 
....................    0x00, 0x3E, 0x00, 0x00, //           #####                 
....................    0x00, 0x3E, 0x00, 0x00, //           #####                 
....................    0x00, 0x3E, 0x00, 0x00, //           #####                 
....................    0x00, 0x3E, 0x00, 0x00, //           #####                 
....................    0x00, 0x3E, 0x00, 0x00, //           #####                 
....................    0x00, 0x3E, 0x00, 0x00, //           #####                 
....................    0x00, 0x3E, 0x00, 0x00, //           #####                 
....................    0x00, 0x3E, 0x00, 0x00, //           #####                 
....................    0x00, 0x3E, 0x00, 0x00, //           #####                 
....................    0x00, 0x3E, 0x00, 0x00, //           #####                 
....................    0x00, 0x3E, 0x00, 0x00, //           #####                 
....................    0x00, 0x3F, 0xFE, 0x00, //           #############         
....................    0x00, 0x3F, 0xFE, 0x00, //           #############         
....................    0x00, 0x3F, 0xFE, 0x00, //           #############         
....................    0x00, 0x3F, 0xFE, 0x00, //           #############         
....................    0x00, 0x00, 0x00, 0x00, //                                 
....................    0x00, 0x00, 0x00, 0x00, //                                 
....................    0x00, 0x00, 0x00, 0x00, //                                 
....................    0x00, 0x00, 0x00, 0x00, //                                 
....................  
....................    /* @2376 'M' (31 pixels wide) */ 
....................    0x7F, 0x80, 0x07, 0xF0, //  ########            #######    
....................    0x7F, 0xC0, 0x0F, 0xF0, //  #########          ########    
....................    0x7F, 0xC0, 0x1F, 0xF0, //  #########         #########    
....................    0x7F, 0xC0, 0x1F, 0xF0, //  #########         #########    
....................    0x7F, 0xE0, 0x1F, 0xF0, //  ##########        #########    
....................    0x7D, 0xE0, 0x3D, 0xF0, //  ##### ####       #### #####    
....................    0x7D, 0xE0, 0x3D, 0xF0, //  ##### ####       #### #####    
....................    0x7D, 0xF0, 0x3D, 0xF0, //  ##### #####      #### #####    
....................    0x7C, 0xF0, 0x79, 0xF0, //  #####  ####     ####  #####    
....................    0x7C, 0xF0, 0x79, 0xF0, //  #####  ####     ####  #####    
....................    0x7C, 0xF8, 0x79, 0xF0, //  #####  #####    ####  #####    
....................    0x7C, 0xF8, 0xF1, 0xF0, //  #####  #####   ####   #####    
....................    0x7C, 0x78, 0xF1, 0xF0, //  #####   ####   ####   #####    
....................    0x7C, 0x7C, 0xF1, 0xF0, //  #####   #####  ####   #####    
....................    0x7C, 0x7D, 0xE1, 0xF0, //  #####   ##### ####    #####    
....................    0x7C, 0x3D, 0xE1, 0xF0, //  #####    #### ####    #####    
....................    0x7C, 0x3F, 0xE1, 0xF0, //  #####    #########    #####    
....................    0x7C, 0x3F, 0xC1, 0xF0, //  #####    ########     #####    
....................    0x7C, 0x1F, 0xC1, 0xF0, //  #####     #######     #####    
....................    0x7C, 0x1F, 0xC1, 0xF0, //  #####     #######     #####    
....................    0x7C, 0x1F, 0x81, 0xF0, //  #####     ######      #####    
....................    0x7C, 0x0F, 0x81, 0xF0, //  #####      #####      #####    
....................    0x7C, 0x0F, 0x81, 0xF0, //  #####      #####      #####    
....................    0x00, 0x00, 0x00, 0x00, //                                 
....................    0x00, 0x00, 0x00, 0x00, //                                 
....................    0x00, 0x00, 0x00, 0x00, //                                 
....................    0x00, 0x00, 0x00, 0x00, //                                 
....................  
....................    /* @2484 'N' (31 pixels wide) */ 
....................    0x07, 0xE0, 0x0F, 0x00, //      ######         ####        
....................    0x07, 0xF0, 0x0F, 0x00, //      #######        ####        
....................    0x07, 0xF0, 0x0F, 0x00, //      #######        ####        
....................    0x07, 0xF8, 0x0F, 0x00, //      ########       ####        
....................    0x07, 0xF8, 0x0F, 0x00, //      ########       ####        
....................    0x07, 0xBC, 0x0F, 0x00, //      #### ####      ####        
....................    0x07, 0xBC, 0x0F, 0x00, //      #### ####      ####        
....................    0x07, 0x9E, 0x0F, 0x00, //      ####  ####     ####        
....................    0x07, 0x9E, 0x0F, 0x00, //      ####  ####     ####        
....................    0x07, 0x8F, 0x0F, 0x00, //      ####   ####    ####        
....................    0x07, 0x8F, 0x0F, 0x00, //      ####   ####    ####        
....................    0x07, 0x87, 0x8F, 0x00, //      ####    ####   ####        
....................    0x07, 0x87, 0x8F, 0x00, //      ####    ####   ####        
....................    0x07, 0x83, 0xCF, 0x00, //      ####     ####  ####        
....................    0x07, 0x83, 0xCF, 0x00, //      ####     ####  ####        
....................    0x07, 0x81, 0xEF, 0x00, //      ####      #### ####        
....................    0x07, 0x81, 0xEF, 0x00, //      ####      #### ####        
....................    0x07, 0x80, 0xEF, 0x00, //      ####       ### ####        
....................    0x07, 0x80, 0xFF, 0x00, //      ####       ########        
....................    0x07, 0x80, 0x7F, 0x00, //      ####        #######        
....................    0x07, 0x80, 0x7F, 0x00, //      ####        #######        
....................    0x07, 0x80, 0x3F, 0x00, //      ####         ######        
....................    0x07, 0x80, 0x1F, 0x00, //      ####          #####        
....................    0x00, 0x00, 0x00, 0x00, //                                 
....................    0x00, 0x00, 0x00, 0x00, //                                 
....................    0x00, 0x00, 0x00, 0x00, //                                 
....................    0x00, 0x00, 0x00, 0x00, //                                 
....................  
....................    /* @2592 'O' (31 pixels wide) */ 
....................    0x00, 0x1F, 0xE0, 0x00, //            ########             
....................    0x00, 0x7F, 0xFC, 0x00, //          #############          
....................    0x00, 0xFF, 0xFE, 0x00, //         ###############         
....................    0x01, 0xFF, 0xFF, 0x00, //        #################        
....................    0x03, 0xF0, 0x3F, 0x80, //       ######      #######       
....................    0x07, 0xE0, 0x1F, 0x80, //      ######        ######       
....................    0x07, 0xC0, 0x0F, 0x80, //      #####          #####       
....................    0x07, 0xC0, 0x0F, 0xC0, //      #####          ######      
....................    0x0F, 0x80, 0x07, 0xC0, //     #####            #####      
....................    0x0F, 0x80, 0x07, 0xC0, //     #####            #####      
....................    0x0F, 0x80, 0x07, 0xC0, //     #####            #####      
....................    0x0F, 0x80, 0x07, 0xC0, //     #####            #####      
....................    0x0F, 0x80, 0x07, 0xC0, //     #####            #####      
....................    0x0F, 0x80, 0x07, 0xC0, //     #####            #####      
....................    0x0F, 0x80, 0x07, 0xC0, //     #####            #####      
....................    0x0F, 0xC0, 0x0F, 0x80, //     ######          #####       
....................    0x07, 0xC0, 0x0F, 0x80, //      #####          #####       
....................    0x07, 0xE0, 0x1F, 0x80, //      ######        ######       
....................    0x07, 0xF0, 0x3F, 0x00, //      #######      ######        
....................    0x03, 0xFF, 0xFE, 0x00, //       #################         
....................    0x01, 0xFF, 0xFC, 0x00, //        ###############          
....................    0x00, 0xFF, 0xF8, 0x00, //         #############           
....................    0x00, 0x1F, 0xE0, 0x00, //            ########             
....................    0x00, 0x00, 0x00, 0x00, //                                 
....................    0x00, 0x00, 0x00, 0x00, //                                 
....................    0x00, 0x00, 0x00, 0x00, //                                 
....................    0x00, 0x00, 0x00, 0x00, //                                 
....................  
....................    /* @2700 'P' (31 pixels wide) */ 
....................    0x00, 0xFF, 0xE0, 0x00, //         ###########             
....................    0x00, 0xFF, 0xF8, 0x00, //         #############           
....................    0x00, 0xFF, 0xFC, 0x00, //         ##############          
....................    0x00, 0xFF, 0xFE, 0x00, //         ###############         
....................    0x00, 0xF8, 0x3F, 0x00, //         #####     ######        
....................    0x00, 0xF8, 0x1F, 0x00, //         #####      #####        
....................    0x00, 0xF8, 0x1F, 0x00, //         #####      #####        
....................    0x00, 0xF8, 0x1F, 0x00, //         #####      #####        
....................    0x00, 0xF8, 0x1F, 0x00, //         #####      #####        
....................    0x00, 0xF8, 0x3F, 0x00, //         #####     ######        
....................    0x00, 0xF8, 0x7E, 0x00, //         #####    ######         
....................    0x00, 0xFF, 0xFE, 0x00, //         ###############         
....................    0x00, 0xFF, 0xFC, 0x00, //         ##############          
....................    0x00, 0xFF, 0xF8, 0x00, //         #############           
....................    0x00, 0xFF, 0xE0, 0x00, //         ###########             
....................    0x00, 0xF8, 0x00, 0x00, //         #####                   
....................    0x00, 0xF8, 0x00, 0x00, //         #####                   
....................    0x00, 0xF8, 0x00, 0x00, //         #####                   
....................    0x00, 0xF8, 0x00, 0x00, //         #####                   
....................    0x00, 0xF8, 0x00, 0x00, //         #####                   
....................    0x00, 0xF8, 0x00, 0x00, //         #####                   
....................    0x00, 0xF8, 0x00, 0x00, //         #####                   
....................    0x00, 0xF8, 0x00, 0x00, //         #####                   
....................    0x00, 0x00, 0x00, 0x00, //                                 
....................    0x00, 0x00, 0x00, 0x00, //                                 
....................    0x00, 0x00, 0x00, 0x00, //                                 
....................    0x00, 0x00, 0x00, 0x00, //                                 
....................  
....................    /* @2808 'Q' (31 pixels wide) */ 
....................    0x00, 0x3F, 0xC0, 0x00, //           ########              
....................    0x00, 0xFF, 0xF8, 0x00, //         #############           
....................    0x03, 0xFF, 0xFC, 0x00, //       ################          
....................    0x03, 0xFF, 0xFE, 0x00, //       #################         
....................    0x07, 0xE0, 0x7F, 0x00, //      ######      #######        
....................    0x0F, 0xC0, 0x3F, 0x00, //     ######        ######        
....................    0x0F, 0x80, 0x1F, 0x00, //     #####          #####        
....................    0x1F, 0x80, 0x1F, 0x80, //    ######          ######       
....................    0x1F, 0x00, 0x0F, 0x80, //    #####            #####       
....................    0x1F, 0x00, 0x0F, 0x80, //    #####            #####       
....................    0x1F, 0x00, 0x0F, 0x80, //    #####            #####       
....................    0x1F, 0x00, 0x0F, 0x80, //    #####            #####       
....................    0x1F, 0x00, 0x0F, 0x80, //    #####            #####       
....................    0x1F, 0x00, 0x0F, 0x80, //    #####            #####       
....................    0x1F, 0x00, 0x0F, 0x80, //    #####            #####       
....................    0x1F, 0x80, 0x1F, 0x00, //    ######          #####        
....................    0x0F, 0x80, 0x1F, 0x00, //     #####          #####        
....................    0x0F, 0xC0, 0x3F, 0x00, //     ######        ######        
....................    0x0F, 0xE0, 0x7E, 0x00, //     #######      ######         
....................    0x07, 0xFF, 0xFC, 0x00, //      #################          
....................    0x03, 0xFF, 0xFC, 0x00, //       ################          
....................    0x01, 0xFF, 0xFF, 0x00, //        #################        
....................    0x00, 0x3F, 0x9F, 0x80, //           #######  ######       
....................    0x00, 0x00, 0x0F, 0xE0, //                     #######     
....................    0x00, 0x00, 0x07, 0xE0, //                      ######     
....................    0x00, 0x00, 0x03, 0xE0, //                       #####     
....................    0x00, 0x00, 0x00, 0xE0, //                         ###     
....................  
....................    /* @2916 'R' (31 pixels wide) */ 
....................    0x01, 0xFF, 0xE0, 0x00, //        ############             
....................    0x01, 0xFF, 0xF8, 0x00, //        ##############           
....................    0x01, 0xFF, 0xFC, 0x00, //        ###############          
....................    0x01, 0xFF, 0xFC, 0x00, //        ###############          
....................    0x01, 0xF0, 0x7E, 0x00, //        #####     ######         
....................    0x01, 0xF0, 0x3E, 0x00, //        #####      #####         
....................    0x01, 0xF0, 0x3E, 0x00, //        #####      #####         
....................    0x01, 0xF0, 0x3E, 0x00, //        #####      #####         
....................    0x01, 0xF0, 0x3E, 0x00, //        #####      #####         
....................    0x01, 0xF0, 0x7C, 0x00, //        #####     #####          
....................    0x01, 0xFF, 0xFC, 0x00, //        ###############          
....................    0x01, 0xFF, 0xF8, 0x00, //        ##############           
....................    0x01, 0xFF, 0xE0, 0x00, //        ############             
....................    0x01, 0xFF, 0xF0, 0x00, //        #############            
....................    0x01, 0xF1, 0xF8, 0x00, //        #####   ######           
....................    0x01, 0xF0, 0xF8, 0x00, //        #####    #####           
....................    0x01, 0xF0, 0x7C, 0x00, //        #####     #####          
....................    0x01, 0xF0, 0x7C, 0x00, //        #####     #####          
....................    0x01, 0xF0, 0x3E, 0x00, //        #####      #####         
....................    0x01, 0xF0, 0x3E, 0x00, //        #####      #####         
....................    0x01, 0xF0, 0x3E, 0x00, //        #####      #####         
....................    0x01, 0xF0, 0x1F, 0x00, //        #####       #####        
....................    0x01, 0xF0, 0x1F, 0x00, //        #####       #####        
....................    0x00, 0x00, 0x00, 0x00, //                                 
....................    0x00, 0x00, 0x00, 0x00, //                                 
....................    0x00, 0x00, 0x00, 0x00, //                                 
....................    0x00, 0x00, 0x00, 0x00, //                                 
....................  
....................    /* @3024 'S' (31 pixels wide) */ 
....................    0x00, 0x07, 0xF0, 0x00, //              #######            
....................    0x00, 0x1F, 0xFC, 0x00, //            ###########          
....................    0x00, 0x7F, 0xFC, 0x00, //          #############          
....................    0x00, 0x7F, 0xFC, 0x00, //          #############          
....................    0x00, 0xFC, 0x0C, 0x00, //         ######      ##          
....................    0x00, 0xF8, 0x00, 0x00, //         #####                   
....................    0x00, 0xF8, 0x00, 0x00, //         #####                   
....................    0x00, 0xFC, 0x00, 0x00, //         ######                  
....................    0x00, 0xFE, 0x00, 0x00, //         #######                 
....................    0x00, 0x7F, 0xC0, 0x00, //          #########              
....................    0x00, 0x3F, 0xF0, 0x00, //           ##########            
....................    0x00, 0x1F, 0xF8, 0x00, //            ##########           
....................    0x00, 0x07, 0xFC, 0x00, //              #########          
....................    0x00, 0x01, 0xFE, 0x00, //                ########         
....................    0x00, 0x00, 0x7E, 0x00, //                  ######         
....................    0x00, 0x00, 0x3E, 0x00, //                   #####         
....................    0x00, 0x00, 0x3E, 0x00, //                   #####         
....................    0x00, 0xC0, 0x3E, 0x00, //         ##        #####         
....................    0x00, 0xF0, 0x7E, 0x00, //         ####     ######         
....................    0x00, 0xFF, 0xFC, 0x00, //         ##############          
....................    0x00, 0xFF, 0xF8, 0x00, //         #############           
....................    0x00, 0x7F, 0xF0, 0x00, //          ###########            
....................    0x00, 0x1F, 0xC0, 0x00, //            #######              
....................    0x00, 0x00, 0x00, 0x00, //                                 
....................    0x00, 0x00, 0x00, 0x00, //                                 
....................    0x00, 0x00, 0x00, 0x00, //                                 
....................    0x00, 0x00, 0x00, 0x00, //                                 
....................  
....................    /* @3132 'T' (31 pixels wide) */ 
....................    0x01, 0xFF, 0xFF, 0x00, //        #################        
....................    0x01, 0xFF, 0xFF, 0x00, //        #################        
....................    0x01, 0xFF, 0xFF, 0x00, //        #################        
....................    0x01, 0xFF, 0xFF, 0x00, //        #################        
....................    0x00, 0x07, 0xC0, 0x00, //              #####              
....................    0x00, 0x07, 0xC0, 0x00, //              #####              
....................    0x00, 0x07, 0xC0, 0x00, //              #####              
....................    0x00, 0x07, 0xC0, 0x00, //              #####              
....................    0x00, 0x07, 0xC0, 0x00, //              #####              
....................    0x00, 0x07, 0xC0, 0x00, //              #####              
....................    0x00, 0x07, 0xC0, 0x00, //              #####              
....................    0x00, 0x07, 0xC0, 0x00, //              #####              
....................    0x00, 0x07, 0xC0, 0x00, //              #####              
....................    0x00, 0x07, 0xC0, 0x00, //              #####              
....................    0x00, 0x07, 0xC0, 0x00, //              #####              
....................    0x00, 0x07, 0xC0, 0x00, //              #####              
....................    0x00, 0x07, 0xC0, 0x00, //              #####              
....................    0x00, 0x07, 0xC0, 0x00, //              #####              
....................    0x00, 0x07, 0xC0, 0x00, //              #####              
....................    0x00, 0x07, 0xC0, 0x00, //              #####              
....................    0x00, 0x07, 0xC0, 0x00, //              #####              
....................    0x00, 0x07, 0xC0, 0x00, //              #####              
....................    0x00, 0x07, 0xC0, 0x00, //              #####              
....................    0x00, 0x00, 0x00, 0x00, //                                 
....................    0x00, 0x00, 0x00, 0x00, //                                 
....................    0x00, 0x00, 0x00, 0x00, //                                 
....................    0x00, 0x00, 0x00, 0x00, //                                 
....................  
....................    /* @3240 'U' (31 pixels wide) */ 
....................    0x07, 0xC0, 0x1F, 0x00, //      #####         #####        
....................    0x07, 0xC0, 0x1F, 0x00, //      #####         #####        
....................    0x07, 0xC0, 0x1F, 0x00, //      #####         #####        
....................    0x07, 0xC0, 0x1F, 0x00, //      #####         #####        
....................    0x07, 0xC0, 0x1F, 0x00, //      #####         #####        
....................    0x07, 0xC0, 0x1F, 0x00, //      #####         #####        
....................    0x07, 0xC0, 0x1F, 0x00, //      #####         #####        
....................    0x07, 0xC0, 0x1F, 0x00, //      #####         #####        
....................    0x07, 0xC0, 0x1F, 0x00, //      #####         #####        
....................    0x07, 0xC0, 0x1F, 0x00, //      #####         #####        
....................    0x07, 0xC0, 0x1F, 0x00, //      #####         #####        
....................    0x07, 0xC0, 0x1F, 0x00, //      #####         #####        
....................    0x07, 0xC0, 0x1F, 0x00, //      #####         #####        
....................    0x07, 0xC0, 0x1F, 0x00, //      #####         #####        
....................    0x07, 0xC0, 0x1F, 0x00, //      #####         #####        
....................    0x07, 0xC0, 0x1F, 0x00, //      #####         #####        
....................    0x07, 0xC0, 0x1F, 0x00, //      #####         #####        
....................    0x07, 0xE0, 0x3F, 0x00, //      ######       ######        
....................    0x03, 0xF0, 0x7E, 0x00, //       ######     ######         
....................    0x03, 0xFF, 0xFE, 0x00, //       #################         
....................    0x01, 0xFF, 0xFC, 0x00, //        ###############          
....................    0x00, 0xFF, 0xF0, 0x00, //         ############            
....................    0x00, 0x1F, 0xC0, 0x00, //            #######              
....................    0x00, 0x00, 0x00, 0x00, //                                 
....................    0x00, 0x00, 0x00, 0x00, //                                 
....................    0x00, 0x00, 0x00, 0x00, //                                 
....................    0x00, 0x00, 0x00, 0x00, //                                 
....................  
....................    /* @3348 'V' (31 pixels wide) */ 
....................    0x07, 0xC0, 0x07, 0xC0, //      #####           #####      
....................    0x07, 0xE0, 0x0F, 0xC0, //      ######         ######      
....................    0x03, 0xE0, 0x0F, 0x80, //       #####         #####       
....................    0x03, 0xE0, 0x0F, 0x80, //       #####         #####       
....................    0x03, 0xF0, 0x1F, 0x80, //       ######       ######       
....................    0x01, 0xF0, 0x1F, 0x00, //        #####       #####        
....................    0x01, 0xF0, 0x1F, 0x00, //        #####       #####        
....................    0x01, 0xF0, 0x1F, 0x00, //        #####       #####        
....................    0x00, 0xF8, 0x3E, 0x00, //         #####     #####         
....................    0x00, 0xF8, 0x3E, 0x00, //         #####     #####         
....................    0x00, 0xF8, 0x3E, 0x00, //         #####     #####         
....................    0x00, 0x7C, 0x7C, 0x00, //          #####   #####          
....................    0x00, 0x7C, 0x7C, 0x00, //          #####   #####          
....................    0x00, 0x7C, 0x78, 0x00, //          #####   ####           
....................    0x00, 0x3C, 0x78, 0x00, //           ####   ####           
....................    0x00, 0x3E, 0xF8, 0x00, //           ##### #####           
....................    0x00, 0x3E, 0xF0, 0x00, //           ##### ####            
....................    0x00, 0x1E, 0xF0, 0x00, //            #### ####            
....................    0x00, 0x1F, 0xF0, 0x00, //            #########            
....................    0x00, 0x1F, 0xE0, 0x00, //            ########             
....................    0x00, 0x0F, 0xE0, 0x00, //             #######             
....................    0x00, 0x0F, 0xE0, 0x00, //             #######             
....................    0x00, 0x0F, 0xC0, 0x00, //             ######              
....................    0x00, 0x00, 0x00, 0x00, //                                 
....................    0x00, 0x00, 0x00, 0x00, //                                 
....................    0x00, 0x00, 0x00, 0x00, //                                 
....................    0x00, 0x00, 0x00, 0x00, //                                 
....................  
....................    /* @3456 'W' (31 pixels wide) */ 
....................    0xF8, 0x07, 0xC0, 0x3E, // #####        #####        ##### 
....................    0xFC, 0x07, 0xC0, 0x7E, // ######       #####       ###### 
....................    0x7C, 0x07, 0xE0, 0x7C, //  #####       ######      #####  
....................    0x7C, 0x07, 0xE0, 0x7C, //  #####       ######      #####  
....................    0x7C, 0x07, 0xE0, 0x7C, //  #####       ######      #####  
....................    0x7E, 0x0F, 0xE0, 0x7C, //  ######     #######      #####  
....................    0x3E, 0x0F, 0xF0, 0x78, //   #####     ########     ####   
....................    0x3E, 0x0E, 0xF0, 0xF8, //   #####     ### ####    #####   
....................    0x3E, 0x0E, 0xF0, 0xF8, //   #####     ### ####    #####   
....................    0x1E, 0x1E, 0xF0, 0xF8, //    ####    #### ####    #####   
....................    0x1F, 0x1E, 0xF8, 0xF0, //    #####   #### #####   ####    
....................    0x1F, 0x1E, 0x78, 0xF0, //    #####   ####  ####   ####    
....................    0x1F, 0x1C, 0x78, 0xF0, //    #####   ###   ####   ####    
....................    0x0F, 0x1C, 0x79, 0xF0, //     ####   ###   ####  #####    
....................    0x0F, 0xBC, 0x7D, 0xE0, //     ##### ####   ##### ####     
....................    0x0F, 0xBC, 0x3D, 0xE0, //     ##### ####    #### ####     
....................    0x0F, 0xB8, 0x3D, 0xE0, //     ##### ###     #### ####     
....................    0x07, 0xB8, 0x3D, 0xE0, //      #### ###     #### ####     
....................    0x07, 0xF8, 0x3F, 0xC0, //      ########     ########      
....................    0x07, 0xF8, 0x1F, 0xC0, //      ########      #######      
....................    0x03, 0xF8, 0x1F, 0xC0, //       #######      #######      
....................    0x03, 0xF0, 0x1F, 0xC0, //       ######       #######      
....................    0x03, 0xF0, 0x1F, 0x80, //       ######       ######       
....................    0x00, 0x00, 0x00, 0x00, //                                 
....................    0x00, 0x00, 0x00, 0x00, //                                 
....................    0x00, 0x00, 0x00, 0x00, //                                 
....................    0x00, 0x00, 0x00, 0x00, //                                 
....................  
....................    /* @3564 'X' (31 pixels wide) */ 
....................    0x03, 0xE0, 0x3E, 0x00, //       #####       #####         
....................    0x03, 0xE0, 0x3E, 0x00, //       #####       #####         
....................    0x03, 0xF0, 0x7E, 0x00, //       ######     ######         
....................    0x01, 0xF0, 0x7C, 0x00, //        #####     #####          
....................    0x01, 0xF8, 0xFC, 0x00, //        ######   ######          
....................    0x00, 0xF8, 0xF8, 0x00, //         #####   #####           
....................    0x00, 0x7D, 0xF0, 0x00, //          ##### #####            
....................    0x00, 0x7D, 0xF0, 0x00, //          ##### #####            
....................    0x00, 0x3F, 0xE0, 0x00, //           #########             
....................    0x00, 0x3F, 0xE0, 0x00, //           #########             
....................    0x00, 0x1F, 0xC0, 0x00, //            #######              
....................    0x00, 0x1F, 0xC0, 0x00, //            #######              
....................    0x00, 0x3F, 0xE0, 0x00, //           #########             
....................    0x00, 0x3F, 0xE0, 0x00, //           #########             
....................    0x00, 0x7D, 0xF0, 0x00, //          ##### #####            
....................    0x00, 0x7D, 0xF0, 0x00, //          ##### #####            
....................    0x00, 0xF8, 0xF8, 0x00, //         #####   #####           
....................    0x00, 0xF8, 0xF8, 0x00, //         #####   #####           
....................    0x01, 0xF0, 0x7C, 0x00, //        #####     #####          
....................    0x03, 0xF0, 0x7E, 0x00, //       ######     ######         
....................    0x03, 0xE0, 0x3E, 0x00, //       #####       #####         
....................    0x07, 0xE0, 0x3F, 0x00, //      ######       ######        
....................    0x07, 0xC0, 0x1F, 0x00, //      #####         #####        
....................    0x00, 0x00, 0x00, 0x00, //                                 
....................    0x00, 0x00, 0x00, 0x00, //                                 
....................    0x00, 0x00, 0x00, 0x00, //                                 
....................    0x00, 0x00, 0x00, 0x00, //                                 
....................  
....................    /* @3672 'Y' (31 pixels wide) */ 
....................    0x03, 0xE0, 0x3E, 0x00, //       #####       #####         
....................    0x03, 0xE0, 0x3E, 0x00, //       #####       #####         
....................    0x03, 0xF0, 0x7E, 0x00, //       ######     ######         
....................    0x01, 0xF0, 0x7C, 0x00, //        #####     #####          
....................    0x01, 0xF8, 0x7C, 0x00, //        ######    #####          
....................    0x00, 0xF8, 0xF8, 0x00, //         #####   #####           
....................    0x00, 0xF8, 0xF8, 0x00, //         #####   #####           
....................    0x00, 0x7D, 0xF0, 0x00, //          ##### #####            
....................    0x00, 0x7D, 0xF0, 0x00, //          ##### #####            
....................    0x00, 0x3D, 0xE0, 0x00, //           #### ####             
....................    0x00, 0x3F, 0xE0, 0x00, //           #########             
....................    0x00, 0x1F, 0xC0, 0x00, //            #######              
....................    0x00, 0x1F, 0xC0, 0x00, //            #######              
....................    0x00, 0x0F, 0x80, 0x00, //             #####               
....................    0x00, 0x0F, 0x80, 0x00, //             #####               
....................    0x00, 0x0F, 0x80, 0x00, //             #####               
....................    0x00, 0x0F, 0x80, 0x00, //             #####               
....................    0x00, 0x0F, 0x80, 0x00, //             #####               
....................    0x00, 0x0F, 0x80, 0x00, //             #####               
....................    0x00, 0x0F, 0x80, 0x00, //             #####               
....................    0x00, 0x0F, 0x80, 0x00, //             #####               
....................    0x00, 0x0F, 0x80, 0x00, //             #####               
....................    0x00, 0x0F, 0x80, 0x00, //             #####               
....................    0x00, 0x00, 0x00, 0x00, //                                 
....................    0x00, 0x00, 0x00, 0x00, //                                 
....................    0x00, 0x00, 0x00, 0x00, //                                 
....................    0x00, 0x00, 0x00, 0x00, //                                 
....................  
....................    /* @3780 'Z' (31 pixels wide) */ 
....................    0x00, 0xFF, 0xFE, 0x00, //         ###############         
....................    0x00, 0xFF, 0xFE, 0x00, //         ###############         
....................    0x00, 0xFF, 0xFE, 0x00, //         ###############         
....................    0x00, 0xFF, 0xFE, 0x00, //         ###############         
....................    0x00, 0x00, 0x3E, 0x00, //                   #####         
....................    0x00, 0x00, 0x7C, 0x00, //                  #####          
....................    0x00, 0x00, 0xF8, 0x00, //                 #####           
....................    0x00, 0x00, 0xF8, 0x00, //                 #####           
....................    0x00, 0x01, 0xF0, 0x00, //                #####            
....................    0x00, 0x03, 0xE0, 0x00, //               #####             
....................    0x00, 0x03, 0xE0, 0x00, //               #####             
....................    0x00, 0x07, 0xC0, 0x00, //              #####              
....................    0x00, 0x0F, 0x80, 0x00, //             #####               
....................    0x00, 0x0F, 0x80, 0x00, //             #####               
....................    0x00, 0x1F, 0x00, 0x00, //            #####                
....................    0x00, 0x3E, 0x00, 0x00, //           #####                 
....................    0x00, 0x3E, 0x00, 0x00, //           #####                 
....................    0x00, 0x7C, 0x00, 0x00, //          #####                  
....................    0x00, 0x78, 0x00, 0x00, //          ####                   
....................    0x00, 0xFF, 0xFF, 0x00, //         ################        
....................    0x00, 0xFF, 0xFF, 0x00, //         ################        
....................    0x00, 0xFF, 0xFF, 0x00, //         ################        
....................    0x00, 0xFF, 0xFF, 0x00, //         ################        
....................    0x00, 0x00, 0x00, 0x00, //                                 
....................    0x00, 0x00, 0x00, 0x00, //                                 
....................    0x00, 0x00, 0x00, 0x00, //                                 
....................    0x00, 0x00, 0x00, 0x00, //                                 
.................... }; 
....................  
....................  
....................  
.................... #include <stdlib.h> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2007 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _STDLIB 
.................... #define _STDLIB 
....................  
.................... //--------------------------------------------------------------------------- 
.................... // Definitions and types 
.................... //--------------------------------------------------------------------------- 
....................  
.................... #ifndef RAND_MAX 
.................... #define RAND_MAX  32767    // The value of which is the maximum value 
....................                            // ... returned by the rand function 
.................... #endif 
....................  
....................  
.................... #IF (sizeof(int16*)>1) 
.................... #DEFINE LONG_POINTERS 1 
.................... #ELSE  
.................... #DEFINE LONG_POINTERS 0 
.................... #ENDIF 
....................  
.................... typedef struct { 
....................    signed int quot; 
....................    signed int rem; 
.................... } div_t; 
....................  
.................... typedef struct { 
....................    signed long quot; 
....................    signed long rem; 
.................... } ldiv_t; 
....................  
.................... #include <stddef.h> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2003 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _STDDEF 
....................  
.................... #define _STDDEF 
....................  
.................... #if sizeof(unsigned int8 *)==1 
.................... #define ptrdiff_t unsigned int8 
.................... #else 
.................... #define ptrdiff_t unsigned int16 
.................... #endif 
....................  
.................... #define size_t unsigned int8 
.................... #define wchar_t char 
.................... #define NULL 0 
....................  
.................... #define offsetof(s,f) (offsetofbit(s,f)/8) 
....................  
.................... #endif 
....................  
....................  
.................... //--------------------------------------------------------------------------- 
.................... // String conversion functions 
.................... //--------------------------------------------------------------------------- 
....................  
.................... /* Standard template: signed int  atoi(char * s) 
....................  * converts the initial portion of the string s to a signed int 
....................  * returns the converted value if any, 0 otherwise 
....................  */ 
.................... signed int atoi(char *s); 
....................  
.................... /* Syntax: signed int32  atoi32(char * s) 
....................    converts the initial portion of the string s to a signed int32 
....................    returns the converted value if any, 0 otherwise*/ 
.................... #if (sizeof(long)==4) 
....................  #define atoi32(s) atol(s) 
.................... #else  
....................  signed int32 atoi32(char *s); 
.................... #endif 
....................  
.................... #if defined(__PCD__) 
.................... // The following functions only work on the 24 bit compiler 
.................... // for the 30F, 33F, 24F and 24H parts 
.................... /* Syntax: signed int48  atoi48(char * s) 
....................    converts the initial portion of the string s to a signed int48 
....................    returns the converted value if any, 0 otherwise*/ 
....................     
.................... signed int48 atoi48(char *s); 
....................  
.................... /* Syntax: signed int64  atoi64(char * s) 
....................    converts the initial portion of the string s to a signed int64 
....................    returns the converted value if any, 0 otherwise*/ 
.................... signed int64 atoi64(char *s); 
.................... #endif 
....................  
.................... /* Syntax: char *  itoa(signed int32 num, int8 base, char * s) 
....................    converts the signed int32 to a string and 
....................    returns the converted value if any, 0 otherwise*/ 
.................... char * itoa(signed int32 num, unsigned int base, char * s); 
....................  
.................... /* Standard template: signed int16  atol(char * s) 
....................  * converts the initial portion of the string s to a signed int16 
....................  * returns the converted value if any, 0 otherwise 
....................  */ 
.................... signed long atol(char *s); 
....................  
.................... /* Standard template: int16 strtoul(char * s,char *endptr,signed int base) 
....................  * converts the initial portion of the string s, represented as an 
....................  * integral value of radix base  to a signed long. 
....................  * Returns the converted value if any, 0 otherwise 
....................  * the final string is returned in the endptr, if endptr is not null 
....................  */ 
.................... signed long strtol(char *s,char *endptr, signed int base); 
....................  
.................... /* Standard template: int16 strtoul(char * s,char *endptr,signed int base) 
....................  * converts the initial portion of the string s, represented as an 
....................  * integral value of radix base to a unsigned long. 
....................  * returns the converted value if any, 0 otherwise 
....................  * the final string is returned in the endptr, if endptr is not null 
....................  */ 
.................... unsigned long strtoul(char *s,char *endptr, signed int base); 
....................  
.................... /* Standart template: float strtof(char * s,char *endptr) 
....................                       float48 strtof48(char *s,char *endptr); 
....................                       float64 strtod(char *s,char *endptr); 
....................  * converts the initial portion of the string s to a float32, float48 or float64, 
....................  * returns the converted value if any, 0 otherwise 
....................  * the final string is returned in the endptr, if endptr is not null                    
.................... */ 
.................... float strtof(char *s,char *endptr); 
.................... #if defined(__PCD__) 
.................... float48 strtof48(char *s,char *endptr); 
.................... float64 strtod(char *s,char *endptr); 
.................... #else 
.................... //provided for compatibility 
.................... #define strtof48(s, e) strtof(s, e) 
.................... #define strtod(s, e) strtof(s, e) 
.................... #endif 
....................  
.................... /* Standard template: float32 atof(char * s) 
....................  * converts the initial portion of the string s to a float. 
....................  * returns the converted value if any, 0 otherwise 
....................  */ 
.................... #define atof(s)   strtof(s, 0) 
....................  
.................... #if defined(__PCD__) 
.................... // The following functions only work on the 24 bit compiler 
.................... // for the 30F, 33F, 24F and 24H parts 
....................  
.................... /* Standard template: float48 atof48(char * s) 
....................  * converts the initial portion of the string s to a float. 
....................  * returns the converted value if any, 0 otherwise 
....................  */ 
.................... #define atof48(s) strtof48(s, 0) 
....................  
.................... /* Standard template: float64 atof64(char * s) 
....................  * converts the initial portion of the string s to a float. 
....................  * returns the converted value if any, 0 otherwise 
....................  */ 
.................... #define atof64(s) strtod(s, 0) 
.................... #endif 
....................  
.................... /* Standard template: float32 atoe(char * s) 
....................  * converts the initial portion of the string s to a float. 
....................  * returns the converted value if any, 0 otherwise 
....................  * also handles E format numbers 
....................  */ 
.................... #if !defined(__PCD__) 
.................... float atoe(char * s); 
.................... #endif 
....................  
.................... #if defined(__PCD__) 
.................... float32 atoe(char * s); 
.................... #endif 
....................  
.................... //--------------------------------------------------------------------------- 
.................... // Pseudo-random sequence generation functions 
.................... //--------------------------------------------------------------------------- 
....................  
.................... /* The rand function computes a sequence of pseudo-random integers in 
....................  * the range 0 to RAND_MAX 
....................  * 
....................  * Parameters: 
....................  *       (none) 
....................  * 
....................  * Returns: 
....................  *       The pseudo-random integer 
....................  */ 
.................... unsigned int16 rand(void); 
....................  
.................... /* The srand function uses the argument as a seed for a new sequence of 
....................  * pseudo-random numbers to be returned by subsequent calls to rand. 
....................  * 
....................  * Parameters: 
....................  *       [in] seed: The seed value to start from. You might need to pass 
....................  * 
....................  * Returns: 
....................  *       (none) 
....................  * 
....................  * Remarks 
....................  *          The srand function sets the starting point for generating 
....................  *       a series of pseudorandom integers. To reinitialize the 
....................  *       generator, use 1 as the seed argument. Any other value for 
....................  *       seed sets the generator to a random starting point. rand 
....................  *       retrieves the pseudorandom numbers that are generated. 
....................  *       Calling rand before any call to srand generates the same 
....................  *       sequence as calling srand with seed passed as 1. 
....................  *          Usually, you need to pass a time here from outer source 
....................  *       so that the numbers will be different every time you run. 
....................  */ 
.................... void srand(unsigned int32 seed); 
....................  
.................... //--------------------------------------------------------------------------- 
.................... // Memory management functions 
.................... //--------------------------------------------------------------------------- 
....................  
.................... // Comming soon 
....................  
.................... //--------------------------------------------------------------------------- 
.................... // Communication with the environment 
.................... //--------------------------------------------------------------------------- 
....................  
.................... /* The function returns 0 always 
....................  */ 
.................... signed int8 system(char *string); 
....................  
.................... //--------------------------------------------------------------------------- 
.................... // Searching and sorting utilities 
.................... //--------------------------------------------------------------------------- 
....................  
.................... /* Performs a binary search of a sorted array.. 
....................  * 
....................  * Parameters: 
....................  *       [in] key: Object to search for 
....................  *       [in] base: Pointer to base of search data 
....................  *       [in] num: Number of elements 
....................  *       [in] width: Width of elements 
....................  *       [in] compare: Function that compares two elements 
....................  * 
....................  * Returns: 
....................  *       bsearch returns a pointer to an occurrence of key in the array pointed 
....................  *       to by base. If key is not found, the function returns NULL. If the 
....................  *       array is not in order or contains duplicate records with identical keys, 
....................  *       the result is unpredictable. 
....................  */ 
.................... //void *bsearch(const void *key, const void *base, size_t num, size_t width, 
.................... //              int (*compare)(const void *, const void *)); 
....................  
.................... /* Performs the shell-metzner sort (not the quick sort algorithm). The contents 
....................  * of the array are sorted into ascending order according to a comparison 
....................  * function pointed to by compar. 
....................  * 
....................  * Parameters: 
....................  *       [in] base: Pointer to base of search data 
....................  *       [in] num: Number of elements 
....................  *       [in] width: Width of elements 
....................  *       [in] compare: Function that compares two elements 
....................  * 
....................  * Returns: 
....................  *       (none) 
....................  */ 
.................... //void *qsort(const void *base, size_t num, size_t width, 
.................... //              int (*compare)(const void *, const void *)); 
....................  
.................... //--------------------------------------------------------------------------- 
.................... // Integer arithmetic functions 
.................... //--------------------------------------------------------------------------- 
....................  
.................... #define labs abs 
....................  
.................... div_t div(signed int numer, signed int denom); 
.................... ldiv_t ldiv(signed long numer, signed long denom); 
....................  
.................... //--------------------------------------------------------------------------- 
.................... // Multibyte character functions 
.................... //--------------------------------------------------------------------------- 
....................  
.................... // Not supported 
....................  
.................... //--------------------------------------------------------------------------- 
.................... // Multibyte string functions 
.................... //--------------------------------------------------------------------------- 
....................  
.................... // Not supported 
....................  
....................  
.................... //--------------------------------------------------------------------------- 
.................... // Internal implementation 
.................... //--------------------------------------------------------------------------- 
....................  
.................... #include <stddef.h> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2003 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _STDDEF 
....................  
.................... #define _STDDEF 
....................  
.................... #if sizeof(unsigned int8 *)==1 
.................... #define ptrdiff_t unsigned int8 
.................... #else 
.................... #define ptrdiff_t unsigned int16 
.................... #endif 
....................  
.................... #define size_t unsigned int8 
.................... #define wchar_t char 
.................... #define NULL 0 
....................  
.................... #define offsetof(s,f) (offsetofbit(s,f)/8) 
....................  
.................... #endif 
....................  
.................... #include <string.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2008 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _STRING 
.................... #define _STRING 
.................... #include <stddef.h> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2003 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _STDDEF 
....................  
.................... #define _STDDEF 
....................  
.................... #if sizeof(unsigned int8 *)==1 
.................... #define ptrdiff_t unsigned int8 
.................... #else 
.................... #define ptrdiff_t unsigned int16 
.................... #endif 
....................  
.................... #define size_t unsigned int8 
.................... #define wchar_t char 
.................... #define NULL 0 
....................  
.................... #define offsetof(s,f) (offsetofbit(s,f)/8) 
....................  
.................... #endif 
....................  
.................... #include <ctype.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2003 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _CTYPE 
.................... #define _CTYPE 
....................  
.................... #define islower(x)  isamong(x,"abcdefghijklmnopqrstuvwxyz") 
.................... #define isupper(x)  isamong(x,"ABCDEFGHIJKLMNOPQRSTUVWXYZ") 
.................... #define isalnum(x)  isamong(x,"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz") 
.................... #define isalpha(x)  isamong(x,"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz") 
.................... #define isdigit(x)  isamong(x,"0123456789") 
.................... #define isspace(x)  ((x)==' ') 
.................... #define isxdigit(x) isamong(x,"0123456789ABCDEFabcdef") 
.................... #define iscntrl(x)  ((x)<' ') 
.................... #define isprint(x)  ((x)>=' ') 
.................... #define isgraph(x)  ((x)>' ') 
.................... #define ispunct(x)  (((x)>' ')&&!isalnum(x)) 
....................  
.................... #endif 
....................  
....................  
....................  
....................  
....................  
.................... ////////////////////////////////////////////// 
.................... //// Uncomment the following define to    //// 
.................... //// allow some functions to use a        //// 
.................... //// quicker algorithm, but use more ROM  //// 
.................... ////                                      //// 
.................... //// #define FASTER_BUT_MORE_ROM          //// 
.................... ////////////////////////////////////////////// 
....................  
....................  
....................  
.................... /*Copying functions*/ 
.................... /* standard template: 
....................    void *memmove(void *s1, void *s2, size_t n). 
....................    Copies max of n characters safely (not following ending '\0') 
....................    from s2 in s1; if s2 has less than n characters, appends 0 */ 
....................  
.................... char *memmove(void *s1,char *s2,size_t n) 
.................... { 
....................    char *sc1; 
....................    char *sc2; 
....................    sc1=s1; 
....................    sc2=s2; 
....................    if(sc2<sc1 && sc1 <sc2 +n) 
....................       for(sc1+=n,sc2+=n;0<n;--n) 
....................          *--sc1=*--sc2; 
....................    else 
....................       for(;0<n;--n) 
....................          *sc1++=*sc2++; 
....................   return s1; 
....................   } 
....................  
.................... /* Standard template: char *strcpy(char *s1, const char *s2) 
....................    copies the string s2 including the null character to s1. 
....................    This is a compiler built in to handle the different address 
....................    spaces */ 
....................  
.................... #define strcopy strcpy 
....................  
.................... /* standard template: 
....................    char *strncpy(char *s1, const char *s2, size_t n). 
....................    Copies max of n characters (not following ending '\0') 
....................    from s2 in s1; if s2 has less than n characters, appends 0 */ 
....................  
.................... char *strncpy(char *s1, char *s2, size_t n) 
.................... { 
....................   char *s; 
....................  
....................   for (s = s1; n > 0 && *s2 != '\0'; n--) 
....................      *s++ = *s2++; 
....................   for (; n > 0; n--) 
....................      *s++ = '\0'; 
....................  
....................   return(s1); 
.................... } 
.................... /***********************************************************/ 
....................  
.................... /*concatenation functions*/ 
.................... /* standard template: char *strcat(char *s1, const char *s2) 
.................... appends s2 to s1*/ 
....................  
.................... char *strcat(char *s1, char *s2) 
.................... { 
....................    char *s; 
....................  
....................    for (s = s1; *s != '\0'; ++s); 
....................    while(*s2 != '\0') 
....................    { 
....................       *s = *s2; 
....................       ++s; 
....................       ++s2; 
....................    } 
....................  
....................    *s = '\0'; 
....................    return(s1); 
.................... } 
.................... /* standard template: char *strncat(char *s1, char *s2,size_t n) 
.................... appends not more than n characters from s2 to s1*/ 
....................  
.................... char *strncat(char *s1, char *s2, size_t n) 
.................... { 
....................    char *s; 
....................  
....................    for (s = s1; *s != '\0'; ++s); 
....................    while(*s2 != '\0' && 0<n) 
....................    { 
....................       *s = *s2; 
....................       ++s; 
....................       ++s2; 
....................       --n; 
....................    } 
....................  
....................    *s = '\0'; 
....................    return(s1); 
.................... } 
....................  
.................... /***********************************************************/ 
....................  
....................  
.................... /*comparison functions*/ 
.................... /* standard template: signed int memcmp(void *s1, void *s2). 
....................    Compares s1 & s2; returns -1 if s1<s2, 0 if s1=s2, 1 if s1>s2 */ 
....................  
.................... signed int8 memcmp(void * s1,char *s2,size_t n) 
.................... { 
.................... char *su1, *su2; 
.................... for(su1=s1, su2=s2; 0<n; ++su1, ++su2, --n) 
.................... { 
....................    if(*su1!=*su2) 
....................       return ((*su1<*su2)?-1:+1); 
.................... } 
.................... return 0; 
.................... } 
....................  
.................... /* standard template: int strcmp(const char *s1, const char *s2). 
....................    Compares s1 & s2; returns -1 if s1<s2, 0 if s1=s2, 1 if s1>s2 */ 
....................  
.................... signed int8 strcmp(char *s1, char *s2) 
.................... { 
....................    for (; *s1 == *s2; s1++, s2++) 
....................       if (*s1 == '\0') 
....................          return(0); 
....................    return((*s1 < *s2) ? -1: 1); 
.................... } 
.................... /* standard template: int strcoll(const char *s1, const char *s2). 
....................    Compares s1 & s2; returns -1 if s1<s2, 0 if s1=s2, 1 if s1>s2 */ 
....................  
.................... signed int8 strcoll(char *s1, char *s2) 
.................... { 
....................    for (; *s1 == *s2; s1++, s2++) 
....................       if (*s1 == '\0') 
....................          return(0); 
....................    return((*s1 < *s2) ? -1: 1); 
.................... } 
....................  
.................... /* standard template: 
....................    int strncmp(const char *s1, const char *s2, size_t n). 
....................    Compares max of n characters (not following 0) from s1 to s2; 
....................    returns same as strcmp */ 
....................  
.................... signed int8 strncmp(char *s1, char *s2, size_t n) 
.................... { 
....................    for (; n > 0; s1++, s2++, n--) 
....................       if (*s1 != *s2) 
....................          return((*s1 <*s2) ? -1: 1); 
....................       else if (*s1 == '\0') 
....................          return(0); 
....................    return(0); 
.................... } 
.................... /* standard template: 
....................    int strxfrm(const char *s1, const char *s2, size_t n). 
....................    transforms maximum of n characters from s2 and places them into s1*/ 
.................... size_t strxfrm(char *s1, char *s2, size_t n) 
.................... { 
....................   char *s; 
....................   unsigned int8 n1; 
....................   n1=n; 
....................   for (s = s1; n > 0 && *s2 != '\0'; n--) 
....................      *s++ = *s2++; 
....................   for (; n > 0; n--) 
....................      *s++ = '\0'; 
....................  
....................   return(n1); 
.................... } 
....................  
....................  
....................  
....................  
....................  
.................... /***********************************************************/ 
.................... /*Search functions*/ 
.................... /* standard template: void *memchr(const char *s, int c). 
....................    Finds first occurrence of c in n characters of s */ 
....................  
.................... char *memchr(void *s,unsigned int8 c,size_t n) 
.................... { 
....................    char uc; 
....................    char *su; 
....................    uc=c; 
....................    for(su=s;0<n;++su,--n) 
....................       if(*su==uc) 
....................       return su; 
....................    return NULL; 
.................... } 
....................  
.................... /* standard template: char *strchr(const char *s, int c). 
....................    Finds first occurrence of c in s */ 
....................  
.................... char *strchr(char *s, unsigned int8 c) 
.................... { 
....................    for (; *s != c; s++) 
....................       if (*s == '\0') 
....................          return(0); 
....................    return(s); 
.................... } 
.................... /* standard template: 
....................    size_t strcspn(const char *s1, const char *s2). 
....................    Computes length of max initial segment of s1 that 
....................    consists entirely of characters NOT from s2*/ 
....................  
.................... unsigned int8  strcspn(char *s1, char *s2) 
.................... { 
....................    char *sc1, *sc2; 
....................  
....................    for (sc1 = s1; *sc1 != 0; sc1++) 
....................       for (sc2 = s2; *sc2 != 0; sc2++) 
....................          if (*sc1 == *sc2) 
....................             return(sc1 - s1); 
....................    return(sc1 - s1); 
.................... } 
.................... /* standard template: 
....................    char *strpbrk(const char *s1, const char *s2). 
....................    Locates first occurence of any character from s2 in s1; 
....................    returns s1 if s2 is empty string */ 
....................  
.................... char *strpbrk(char *s1, char *s2) 
.................... { 
....................    char *sc1, *sc2; 
....................  
....................    for (sc1 = s1; *sc1 != 0; sc1++) 
....................       for (sc2 = s2; *sc2 != 0; sc2++) 
....................          if (*sc1 == *sc2) 
....................             return(sc1); 
....................    return(0); 
.................... } 
....................  
....................  
.................... /* standard template: char *strrchr(const char *s, int c). 
....................    Finds last occurrence of c in s */ 
....................  
.................... char *strrchr(char *s, unsigned int8 c) 
.................... { 
....................    char *p; 
....................  
....................    for (p = 0; ; s++) 
....................    { 
....................       if (*s == c) 
....................          p = s; 
....................       if (*s == '\0') 
....................          return(p); 
....................    } 
.................... } 
.................... /* computes length of max initial segment of s1 consisting 
....................    entirely of characters from s2 */ 
....................  
.................... unsigned int8  strspn(char *s1, char *s2) 
.................... { 
....................    char *sc1, *sc2; 
....................  
....................    for (sc1 = s1; *sc1 != 0; sc1++) 
....................       for (sc2 = s2; ; sc2++) 
....................     if (*sc2 == '\0') 
....................        return(sc1 - s1); 
....................          else if (*sc1 == *sc2) 
....................             break; 
....................    return(sc1 - s1); 
.................... } 
.................... /* standard template: 
....................    char *strstr(const char *s1, const char *s2); 
....................    Locates first occurence of character sequence s2 in s1; 
....................    returns 0 if s2 is empty string 
....................  
....................    Uncomment #define FASTER_BUT_MORE_ROM at the top of the 
....................    file to use the faster algorithm */ 
.................... char *strstr(char *s1, char *s2) 
.................... { 
....................    char *s, *t; 
....................  
....................    #ifdef FASTER_BUT_MORE_ROM 
....................    if (*s2 == '\0') 
....................          return(s1); 
....................    #endif 
....................  
....................    while (*s1) 
....................    { 
....................       for(s = s1, t = s2; *t && (*s == *t); ++s, ++t); 
....................  
....................       if (*t == '\0') 
....................          return s1; 
....................       ++s1; 
....................       #ifdef FASTER_BUT_MORE_ROM 
....................          while(*s1 != '\0' && *s1 != *s2) 
....................             ++s1; 
....................       #endif 
....................    } 
....................    return 0; 
.................... } 
....................  
.................... /* standard template: char *strtok(char *s1, const char *s2). 
....................  
....................    Finds next token in s1 delimited by a character from separator 
....................    string s2 (which can be different from call to call).  First call 
....................    starts at beginning of s1 searching for first character NOT 
....................    contained in s2; returns 0 if none is found. 
....................    If one is found, it is the start of first token (return value). 
....................    Function then searches from there for a character contained in s2. 
....................    If none is found, current token extends to end of s1, and subsequent 
....................    searches for a token will return 0.  If one is found, it is 
....................    overwritten by '\0', which terminates current token.  Function saves 
....................    pointer to following character from which next search will start. 
....................    Each subsequent call, with 0 as first argument, starts searching 
....................    from saved pointer */ 
....................  
.................... char *strtok(char *s1, char *s2) 
.................... { 
....................    char *beg, *end; 
....................    static char *save; 
....................  
....................    beg = (s1)? s1: save; 
....................    beg += strspn(beg, s2); 
....................    if (*beg == '\0') 
....................    { 
....................       *save = ' '; 
....................       return(0); 
....................    } 
....................    end = strpbrk(beg, s2); 
....................    if (*end != '\0') 
....................    { 
....................       *end = '\0'; 
....................       end++; 
....................    } 
....................    save = end; 
....................    return(beg); 
.................... } 
....................  
.................... /*****************************************************************/ 
.................... /*Miscellaneous functions*/ 
.................... /* standard template 
.................... maps error number in errnum to an error message string 
.................... Returns: Pointer to string 
.................... */ 
.................... #ifdef _ERRNO 
.................... char * strerror(unsigned int8 errnum) 
.................... { 
.................... char s[15]; 
.................... switch( errnum) 
.................... { 
.................... case 0: 
....................    strcpy(s,"no errors"); 
....................    return s; 
.................... case EDOM : 
....................    strcpy(s,"domain error"); 
....................    return s; 
.................... case ERANGE: 
....................    strcpy(s,"range error"); 
....................    return s; 
.................... } 
.................... } 
.................... #ENDIF 
.................... /* standard template: size_t strlen(const char *s). 
....................    Computes length of s1 (preceding terminating 0) */ 
....................  
.................... unsigned int8 strlen(char *s) 
.................... { 
....................    char *sc; 
....................  
....................    for (sc = s; *sc != 0; sc++); 
*
0440:  MOVFF  23,25
0444:  MOVFF  22,24
0448:  MOVFF  25,03
044C:  MOVFF  24,FE9
0450:  MOVFF  25,FEA
0454:  MOVF   FEF,F
0456:  BZ    0460
0458:  INCF   24,F
045A:  BTFSC  FD8.2
045C:  INCF   25,F
045E:  BRA    0448
....................    return(sc - s); 
0460:  MOVF   22,W
0462:  SUBWF  24,W
0464:  MOVWF  00
0466:  MOVF   23,W
0468:  SUBWFB 25,W
046A:  MOVWF  03
046C:  MOVFF  00,01
.................... } 
0470:  GOTO   0750 (RETURN)
....................  
.................... /* standard template: size_t stricmp(const char *s1, const char *s2). 
....................    Compares s1 to s2 ignoring case (upper vs. lower) */ 
....................  
.................... signed int8 stricmp(char *s1, char *s2) 
.................... { 
....................  for(; *s1==*s2||(isalpha(*s1)&&isalpha(*s2)&&(*s1==*s2+32||*s2==*s1+32)); 
....................     s1++, s2++) 
....................     if (*s1 == '\0') 
....................        return(0); 
....................  return((*s1 < *s2) ? -1: 1); 
.................... } 
....................  
....................  
.................... /* standard template: char *strlwr(char *s). 
....................    Replaces uppercase letters by lowercase; 
....................    returns pointer to new string s */ 
....................  
.................... char *strlwr(char *s) 
.................... { 
....................    char *p; 
....................  
....................    for (p = s; *p != '\0'; p++) 
....................       if (*p >= 'A' && *p <='Z') 
....................          *p += 'a' - 'A'; 
....................    return(s); 
.................... } 
....................  
....................  
.................... /************************************************************/ 
....................  
....................  
.................... #endif 
....................  
....................  
.................... div_t div(signed int numer, signed int denom) 
.................... { 
....................    div_t val; 
....................    val.quot = numer / denom; 
....................    val.rem = numer - (denom * val.quot); 
....................    return (val); 
.................... } 
....................  
.................... ldiv_t ldiv(signed long numer, signed long denom) 
.................... { 
....................    ldiv_t val; 
....................  
....................    val.quot = numer / denom; 
....................    val.rem = numer - (denom * val.quot); 
....................    return (val); 
.................... } 
....................  
.................... #if defined(__PCD__) 
.................... float32 atoe(char * s) 
.................... { 
....................    float32 pow10 = 1.0; 
....................    float32 result = 0.0; 
....................    unsigned int8 sign = 0; 
....................    unsigned int8 expsign = 0; 
....................    char c; 
....................    unsigned int8 ptr = 0; 
....................    unsigned int8 i; 
....................    float32 exp = 1.0; 
....................    unsigned int8 expcnt = 0; 
....................  
....................    c = s[ptr++]; 
....................  
....................    if ((c>='0' && c<='9') || c=='+' || c=='-' || c=='.' || c=='E' || c=='e') { 
....................       if(c == '-') { 
....................          sign = 1; 
....................          c = s[ptr++]; 
....................       } 
....................       if(c == '+') 
....................          c = s[ptr++]; 
....................  
....................       while((c >= '0' && c <= '9')) { 
....................          result = 10*result + c - '0'; 
....................          c = s[ptr++]; 
....................       } 
....................  
....................       if (c == '.') { 
....................          c = s[ptr++]; 
....................          while((c >= '0' && c <= '9')) { 
....................              pow10 = pow10*10; 
....................              result += (c - '0')/pow10; 
....................              c = s[ptr++]; 
....................          } 
....................       } 
....................  
....................       // Handling the exponent 
....................       if (c=='e' || c=='E') { 
....................          c = s[ptr++]; 
....................  
....................          if(c == '-') { 
....................             expsign = 1; 
....................             c = s[ptr++]; 
....................          } 
....................          if(c == '+') 
....................             c = s[ptr++]; 
....................  
....................          while((c >= '0' && c <= '9')) { 
....................             expcnt = 10*expcnt + c - '0'; 
....................             c = s[ptr++]; 
....................          } 
....................  
....................          for(i=0;i<expcnt;i++) 
....................             exp*=10; 
....................  
....................          if(expsign==1) 
....................             result/=exp; 
....................          else 
....................             result*=exp; 
....................       } 
....................    } 
....................  
....................    if (sign == 1) 
....................       result = -1*result; 
....................    return(result); 
.................... } 
.................... #endif 
....................  
.................... #if !defined(__PCD__) 
.................... float atoe(char * s) 
.................... { 
....................    float pow10 = 1.0; 
....................    float result = 0.0; 
....................    unsigned int8 sign = 0; 
....................    unsigned int8 expsign = 0; 
....................    char c; 
....................    unsigned int8 ptr = 0; 
....................    unsigned int8 i; 
....................    float exp = 1.0; 
....................    unsigned int8 expcnt = 0; 
....................  
....................    c = s[ptr++]; 
....................  
....................    if ((c>='0' && c<='9') || c=='+' || c=='-' || c=='.' || c=='E' || c=='e') { 
....................       if(c == '-') { 
....................          sign = 1; 
....................          c = s[ptr++]; 
....................       } 
....................       if(c == '+') 
....................          c = s[ptr++]; 
....................  
....................       while((c >= '0' && c <= '9')) { 
....................          result = 10*result + c - '0'; 
....................          c = s[ptr++]; 
....................       } 
....................  
....................       if (c == '.') { 
....................          c = s[ptr++]; 
....................          while((c >= '0' && c <= '9')) { 
....................              pow10 = pow10*10; 
....................              result += (c - '0')/pow10; 
....................              c = s[ptr++]; 
....................          } 
....................       } 
....................  
....................       // Handling the exponent 
....................       if (c=='e' || c=='E') { 
....................          c = s[ptr++]; 
....................  
....................          if(c == '-') { 
....................             expsign = 1; 
....................             c = s[ptr++]; 
....................          } 
....................          if(c == '+') 
....................             c = s[ptr++]; 
....................  
....................          while((c >= '0' && c <= '9')) { 
....................             expcnt = 10*expcnt + c - '0'; 
....................             c = s[ptr++]; 
....................          } 
....................  
....................          for(i=0;i<expcnt;i++) 
....................             exp*=10; 
....................  
....................          if(expsign==1) 
....................             result/=exp; 
....................          else 
....................             result*=exp; 
....................       } 
....................    } 
....................  
....................    if (sign == 1) 
....................       result = -1*result; 
....................    return(result); 
.................... } 
.................... #endif 
....................  
.................... signed int atoi(char *s) 
.................... { 
....................    signed int result; 
....................    unsigned int sign, base, index; 
....................    char c; 
....................  
....................    index = 0; 
....................    sign = 0; 
....................    base = 10; 
....................    result = 0; 
....................  
....................    if (!s) 
....................       return 0; 
....................    // Omit all preceeding alpha characters 
....................    c = s[index++]; 
....................  
....................    // increase index if either positive or negative sign is detected 
....................    if (c == '-') 
....................    { 
....................       sign = 1;         // Set the sign to negative 
....................       c = s[index++]; 
....................    } 
....................    else if (c == '+') 
....................    { 
....................       c = s[index++]; 
....................    } 
....................  
....................    if (c >= '0' && c <= '9') 
....................    { 
....................  
....................       // Check for hexa number 
....................       if (c == '0' && (s[index] == 'x' || s[index] == 'X')) 
....................       { 
....................          base = 16; 
....................          index++; 
....................          c = s[index++]; 
....................       } 
....................  
....................       // The number is a decimal number 
....................       if (base == 10) 
....................       { 
....................          while (c >= '0' && c <= '9') 
....................          { 
....................             result = 10*result + (c - '0'); 
....................             c = s[index++]; 
....................          } 
....................       } 
....................       else if (base == 16)    // The number is a hexa number 
....................       { 
....................          c = toupper(c); 
....................          while ( (c >= '0' && c <= '9') || (c >= 'A' && c<='F')) 
....................          { 
....................             if (c >= '0' && c <= '9') 
....................                result = (result << 4) + (c - '0'); 
....................             else 
....................                result = (result << 4) + (c - 'A' + 10); 
....................  
....................             c = s[index++]; 
....................             c = toupper(c); 
....................          } 
....................       } 
....................    } 
....................  
....................    if (sign == 1 && base == 10) 
....................        result = -result; 
....................  
....................    return(result); 
.................... } 
....................  
.................... signed long atol(char *s) 
.................... { 
....................    signed long result; 
....................    unsigned int sign, base, index; 
....................    char c; 
....................  
....................    index = 0; 
....................    sign = 0; 
....................    base = 10; 
....................    result = 0; 
....................  
....................    if (!s) 
....................       return 0; 
....................    c = s[index++]; 
....................  
....................    // increase index if either positive or negative sign is detected 
....................    if (c == '-') 
....................    { 
....................       sign = 1;         // Set the sign to negative 
....................       c = s[index++]; 
....................    } 
....................    else if (c == '+') 
....................    { 
....................       c = s[index++]; 
....................    } 
....................  
....................    if (c >= '0' && c <= '9') 
....................    { 
....................       if (c == '0' && (s[index] == 'x' || s[index] == 'X')) 
....................       { 
....................          base = 16; 
....................          index++; 
....................          c = s[index++]; 
....................       } 
....................  
....................       // The number is a decimal number 
....................       if (base == 10) 
....................       { 
....................          while (c >= '0' && c <= '9') 
....................          { 
....................             result = 10*result + (c - '0'); 
....................             c = s[index++]; 
....................          } 
....................       } 
....................       else if (base == 16)    // The number is a hexa number 
....................       { 
....................          c = toupper(c); 
....................          while ( (c >= '0' && c <= '9') || (c >= 'A' && c <='F')) 
....................          { 
....................             if (c >= '0' && c <= '9') 
....................                result = (result << 4) + (c - '0'); 
....................             else 
....................                result = (result << 4) + (c - 'A' + 10); 
....................  
....................             c = s[index++];c = toupper(c); 
....................          } 
....................       } 
....................    } 
....................  
....................    if (base == 10 && sign == 1) 
....................       result = -result; 
....................  
....................    return(result); 
.................... } 
....................  
.................... /* A fast routine to multiply by 10 
....................  */ 
.................... signed int32 mult_with10(int32 num) 
.................... { 
....................    return ( (num << 1) + (num << 3) ); 
.................... } 
....................  
.................... #if sizeof(long)==2 
.................... signed int32 atoi32(char *s) 
.................... { 
....................    signed int32 result; 
....................    int8 sign, base, index; 
....................    char c; 
....................  
....................    index = 0; 
....................    sign = 0; 
....................    base = 10; 
....................    result = 0; 
....................  
....................    if (!s) 
....................       return 0; 
....................    c = s[index++]; 
....................  
....................    // increase index if either positive or negative sign is detected 
....................    if (c == '-') 
....................    { 
....................       sign = 1;         // Set the sign to negative 
....................       c = s[index++]; 
....................    } 
....................    else if (c == '+') 
....................    { 
....................       c = s[index++]; 
....................    } 
....................  
....................    if (c >= '0' && c <= '9') 
....................    { 
....................       if (c == '0' && (s[index] == 'x' || s[index] == 'X')) 
....................       { 
....................          base = 16; 
....................          index++; 
....................          c = s[index++]; 
....................       } 
....................  
....................       // The number is a decimal number 
....................       if (base == 10) 
....................       { 
....................          while (c >= '0' && c <= '9') { 
....................             result = (result << 1) + (result << 3);  // result *= 10; 
....................             result += (c - '0'); 
....................             c = s[index++]; 
....................          } 
....................       } 
....................       else if (base == 16)    // The number is a hexa number 
....................       { 
....................          c = toupper(c); 
....................          while ((c >= '0' && c <= '9') || (c >= 'A' && c <='F')) 
....................          { 
....................             if (c >= '0' && c <= '9') 
....................                result = (result << 4) + (c - '0'); 
....................             else 
....................                result = (result << 4) + (c - 'A' + 10); 
....................  
....................             c = s[index++];c = toupper(c); 
....................          } 
....................       } 
....................    } 
....................  
....................    if (base == 10 && sign == 1) 
....................       result = -result; 
....................  
....................    return(result); 
.................... } 
.................... #endif 
....................  
.................... #if defined(__PCD__) 
....................  
.................... signed int48 atoi48(char *s) 
.................... { 
....................    signed int48 result; 
....................    int8 sign, base, index; 
....................    char c; 
....................  
....................    index = 0; 
....................    sign = 0; 
....................    base = 10; 
....................    result = 0; 
....................  
....................    if (!s) 
....................       return 0; 
....................    c = s[index++]; 
....................  
....................    // increase index if either positive or negative sign is detected 
....................    if (c == '-') 
....................    { 
....................       sign = 1;         // Set the sign to negative 
....................       c = s[index++]; 
....................    } 
....................    else if (c == '+') 
....................    { 
....................       c = s[index++]; 
....................    } 
....................  
....................    if (c >= '0' && c <= '9') 
....................    { 
....................       if (c == '0' && (s[index] == 'x' || s[index] == 'X')) 
....................       { 
....................          base = 16; 
....................          index++; 
....................          c = s[index++]; 
....................       } 
....................  
....................       // The number is a decimal number 
....................       if (base == 10) 
....................       { 
....................          while (c >= '0' && c <= '9') { 
....................             result = (result << 1) + (result << 3);  // result *= 10; 
....................             result += (c - '0'); 
....................             c = s[index++]; 
....................          } 
....................       } 
....................       else if (base == 16)    // The number is a hexa number 
....................       { 
....................          c = toupper(c); 
....................          while ((c >= '0' && c <= '9') || (c >= 'A' && c <='F')) 
....................          { 
....................             if (c >= '0' && c <= '9') 
....................                result = (result << 4) + (c - '0'); 
....................             else 
....................                result = (result << 4) + (c - 'A' + 10); 
....................  
....................             c = s[index++];c = toupper(c); 
....................          } 
....................       } 
....................    } 
....................  
....................    if (base == 10 && sign == 1) 
....................       result = -result; 
....................  
....................    return(result); 
.................... } 
....................  
.................... signed int64 atoi64(char *s) 
.................... { 
....................    signed int64 result; 
....................    int8 sign, base, index; 
....................    char c; 
....................  
....................    index = 0; 
....................    sign = 0; 
....................    base = 10; 
....................    result = 0; 
....................  
....................    if (!s) 
....................       return 0; 
....................    c = s[index++]; 
....................  
....................    // increase index if either positive or negative sign is detected 
....................    if (c == '-') 
....................    { 
....................       sign = 1;         // Set the sign to negative 
....................       c = s[index++]; 
....................    } 
....................    else if (c == '+') 
....................    { 
....................       c = s[index++]; 
....................    } 
....................  
....................    if (c >= '0' && c <= '9') 
....................    { 
....................       if (c == '0' && (s[index] == 'x' || s[index] == 'X')) 
....................       { 
....................          base = 16; 
....................          index++; 
....................          c = s[index++]; 
....................       } 
....................  
....................       // The number is a decimal number 
....................       if (base == 10) 
....................       { 
....................          while (c >= '0' && c <= '9') { 
....................             result = (result << 1) + (result << 3);  // result *= 10; 
....................             result += (c - '0'); 
....................             c = s[index++]; 
....................          } 
....................       } 
....................       else if (base == 16)    // The number is a hexa number 
....................       { 
....................          c = toupper(c); 
....................          while ((c >= '0' && c <= '9') || (c >= 'A' && c <='F')) 
....................          { 
....................             if (c >= '0' && c <= '9') 
....................                result = (result << 4) + (c - '0'); 
....................             else 
....................                result = (result << 4) + (c - 'A' + 10); 
....................  
....................             c = s[index++];c = toupper(c); 
....................          } 
....................       } 
....................    } 
....................  
....................    if (base == 10 && sign == 1) 
....................       result = -result; 
....................  
....................    return(result); 
.................... } 
.................... #endif 
....................  
.................... char * itoa(signed int32 num, unsigned int base, char * s) 
.................... { 
....................      unsigned int32 temp=1; 
....................      unsigned int8 i,sign=0,cnt=0; 
....................      char c; 
....................  
....................      if(num<0) { 
....................          sign=1;        // Check for negative number 
....................          num*=-1; 
....................      } 
....................  
....................      while(temp>0) { 
....................          temp=(num/base); 
....................          s[cnt]=(num%base)+'0';    // Conversion 
....................  
....................          if(s[cnt]>0x39) 
....................             s[cnt]+=0x7; 
....................  
....................          cnt++; 
....................          num=temp; 
....................      } 
....................  
....................      if(sign==1) { 
....................          s[cnt]=0x2D;      // Negative sign 
....................          cnt++; 
....................      } 
....................  
....................      for(i = 0;i<(int8)(cnt/2);i++) { 
....................  
....................          c=s[i]; 
....................          s[i]=s[cnt-i-1];        // Reverse the number 
....................          s[cnt-i-1]=c; 
....................      } 
....................      s[cnt]='\0';     // End the string 
....................      return s; 
.................... } 
....................  
.................... float strtof(char *s, char *endptr) 
.................... { 
....................    float pow10 = 1.0; 
....................    float result = 0.0; 
....................    int1 skip = TRUE, sign = FALSE, point = FALSE; 
....................    char c; 
....................    unsigned int8 ptr = 0; 
....................  
....................    if (!s) 
....................       return 0; 
....................  
....................    for(c=s[ptr++]; c!=0; c=s[ptr++]) 
....................    { 
....................       if (skip && !isspace(c)) 
....................       { 
....................          skip = FALSE; 
....................          if (c == '+') 
....................          { 
....................             sign = FALSE; 
....................             continue; 
....................          }             
....................          else if (c == '-') 
....................          { 
....................             sign = TRUE; 
....................             continue; 
....................          } 
....................       } 
....................       if (!skip && (c == '.') && !point) 
....................          point = TRUE; 
....................       else if (!skip && isdigit(c)) 
....................       { 
....................          c -= '0'; 
....................          if (point) 
....................          { 
....................             pow10 = pow10 * 10.0; 
....................             result += (float)c / pow10;    
....................          } 
....................          else 
....................          { 
....................             result = 10.0 * result + (float)c; 
....................          } 
....................       } 
....................       else if (!skip) 
....................          break; 
....................    } 
....................  
....................    if (sign) 
....................       result = -1*result; 
....................        
....................    if(endptr) 
....................    { 
....................       if (ptr) { 
....................          ptr--; 
....................        #IF LONG_POINTERS  
....................          *((long *)endptr)= s+ptr;  
....................        #ELSE 
....................          *((char *)endptr)=s+ptr; 
....................        #ENDIF 
....................       } 
....................       else 
....................       { 
....................       #IF LONG_POINTERS 
....................       *((long *)endptr)= s;  
....................       #ELSE 
....................       *((char *)endptr)=s; 
....................       #ENDIF 
....................       } 
....................    } 
....................  
....................    return(result); 
.................... } 
....................  
.................... #if defined(__PCD__) 
.................... float48 strtof48(char *s, char *endptr) 
.................... { 
....................    float48 pow10 = 1.0; 
....................    float48 result = 0.0; 
....................    int1 skip = TRUE, sign = FALSE, point = FALSE; 
....................    char c; 
....................    unsigned int8 ptr = 0; 
....................  
....................    if (!s) 
....................       return 0; 
....................  
....................    for(c=s[ptr++]; c!=0; c=s[ptr++]) 
....................    { 
....................       if (skip && !isspace(c)) 
....................       { 
....................          skip = FALSE; 
....................          if (c == '+') 
....................          { 
....................             sign = FALSE; 
....................             continue; 
....................          }             
....................          else if (c == '-') 
....................          { 
....................             sign = TRUE; 
....................             continue; 
....................          } 
....................       } 
....................       if (!skip && (c == '.') && !point) 
....................          point = TRUE; 
....................       else if (!skip && isdigit(c)) 
....................       { 
....................          c -= '0'; 
....................          if (point) 
....................          { 
....................             pow10 = pow10 * 10.0; 
....................             result += (float48)c / pow10;    
....................          } 
....................          else 
....................          { 
....................             result = 10.0 * result + (float48)c; 
....................          } 
....................       } 
....................       else if (!skip) 
....................          break; 
....................    } 
....................  
....................    if (sign) 
....................       result = -1*result; 
....................        
....................    if(endptr) 
....................    { 
....................       if (ptr) { 
....................          ptr--; 
....................        #IF LONG_POINTERS  
....................          *((long *)endptr)= s+ptr;  
....................        #ELSE 
....................          *((char *)endptr)=s+ptr; 
....................        #ENDIF 
....................       } 
....................       else 
....................       { 
....................       #IF LONG_POINTERS 
....................       *((long *)endptr)= s;  
....................       #ELSE 
....................       *((char *)endptr)=s; 
....................       #ENDIF 
....................       } 
....................    } 
....................  
....................    return(result); 
.................... } 
....................  
.................... float64 strtod(char *s, char *endptr) 
.................... { 
....................    float64 pow10 = 1.0; 
....................    float64 result = 0.0; 
....................    int1 skip = TRUE, sign = FALSE, point = FALSE; 
....................    char c; 
....................    unsigned int8 ptr = 0; 
....................  
....................    if (!s) 
....................       return 0; 
....................  
....................    for(c=s[ptr++]; c!=0; c=s[ptr++]) 
....................    { 
....................       if (skip && !isspace(c)) 
....................       { 
....................          skip = FALSE; 
....................          if (c == '+') 
....................          { 
....................             sign = FALSE; 
....................             continue; 
....................          }             
....................          else if (c == '-') 
....................          { 
....................             sign = TRUE; 
....................             continue; 
....................          } 
....................       } 
....................       if (!skip && (c == '.') && !point) 
....................          point = TRUE; 
....................       else if (!skip && isdigit(c)) 
....................       { 
....................          c -= '0'; 
....................          if (point) 
....................          { 
....................             pow10 = pow10 * 10.0; 
....................             result += (float64)c / pow10;    
....................          } 
....................          else 
....................          { 
....................             result = 10.0 * result + (float64)c; 
....................          } 
....................       } 
....................       else if (!skip) 
....................          break; 
....................    } 
....................  
....................    if (sign) 
....................       result = -1*result; 
....................        
....................    if(endptr) 
....................    { 
....................       if (ptr) { 
....................          ptr--; 
....................        #IF LONG_POINTERS  
....................          *((long *)endptr)= s+ptr;  
....................        #ELSE 
....................          *((char *)endptr)=s+ptr; 
....................        #ENDIF 
....................       } 
....................       else 
....................       { 
....................       #IF LONG_POINTERS 
....................       *((long *)endptr)= s;  
....................       #ELSE 
....................       *((char *)endptr)=s; 
....................       #ENDIF 
....................       } 
....................    } 
....................  
....................    return(result); 
.................... } 
.................... #endif 
....................  
.................... unsigned long strtoul(char *s, char *endptr, signed int base) 
.................... { 
....................    char *sc,*s1,*sd; 
....................    unsigned long x=0; 
....................    char sign; 
....................    char digits[]="0123456789abcdefghijklmnopqstuvwxyz"; 
....................    for(sc=s;isspace(*sc);++sc); 
....................    sign=*sc=='-'||*sc=='+'?*sc++:'+'; 
....................    if(sign=='-' || base <0 || base ==1|| base >36) // invalid base 
....................    goto StrtoulGO; 
....................  
....................    else if (base) 
....................    { 
....................       if(base==16 && *sc =='0'&&(sc[1]=='x' || sc[1]=='X')) 
....................          sc+=2; 
....................       if(base==8 && *sc =='0') 
....................          sc+=1; 
....................       if(base==2 && *sc =='0'&&sc[1]=='b') 
....................          sc+=2; 
....................  
....................    } 
....................    else if(*sc!='0') // base is 0, find base 
....................       base=10; 
....................    else if (sc[1]=='x' || sc[1]=='X') 
....................       base =16,sc+=2; 
....................    else if(sc[1]=='b') 
....................       base=2,sc+=2; 
....................    else 
....................       base=8; 
....................    for (s1=sc;*sc=='0';++sc);// skip leading zeroes 
....................    sd=memchr(digits,tolower(*sc),base); 
....................    for(; sd!=0; ) 
....................    { 
....................       x=x*base+(int16)(sd-digits); 
....................       ++sc; 
....................       sd=memchr(digits,tolower(*sc),base); 
....................    } 
....................    if(s1==sc) 
....................    { 
....................    StrtoulGO: 
....................       if (endptr) 
....................       { 
....................          #IF LONG_POINTERS 
....................          *((long *)endptr)= s;  
....................          #ELSE 
....................          *((char *)endptr)=s; 
....................          #ENDIF 
....................          } 
....................    return 0; 
....................    } 
....................    if (endptr) 
....................    { 
....................          #IF LONG_POINTERS 
....................          *((long *)endptr)= sc;  
....................          #ELSE 
....................          *((char *)endptr)=sc;  
....................          #ENDIF 
....................    } 
....................    return x; 
.................... } 
....................  
....................  
.................... signed long strtol(char *s,char *endptr, signed int base) 
.................... { 
....................    char *sc,*s1,*sd; 
....................    signed long x=0; 
....................    char sign; 
....................    char digits[]="0123456789abcdefghijklmnopqstuvwxyz"; 
....................    for(sc=s;isspace(*sc);++sc); 
....................    sign=*sc=='-'||*sc=='+'?*sc++:'+'; 
....................    if (base <0 || base ==1|| base >36) // invalid base 
....................    goto StrtolGO; 
....................    else if (base) 
....................    { 
....................       if(base==16 && *sc =='0'&&(sc[1]=='x' || sc[1]=='X')) 
....................          sc+=2; 
....................       if(base==8 && *sc =='0') 
....................          sc+=1; 
....................       if(base==2 && *sc =='0'&&sc[1]=='b') 
....................          sc+=2; 
....................  
....................    } 
....................    else if(*sc!='0') // base is 0, find base 
....................       base=10; 
....................    else if (sc[1]=='x' || sc[1]=='X') 
....................       base =16,sc+=2; 
....................    else if(sc[1]=='b') 
....................       base=2,sc+=2; 
....................    else 
....................       base=8; 
....................    for (s1=sc;*sc=='0';++sc);// skip leading zeroes 
....................  
....................    sd=memchr(digits,tolower(*sc),base); 
....................    for(;sd!=0;) 
....................    { 
....................       x=x*base+(int16)(sd-digits); 
....................       ++sc; 
....................       sd=memchr(digits,tolower(*sc),base); 
....................    } 
....................    if(s1==sc) 
....................    { 
....................    StrtolGO: 
....................       if (endptr) 
....................       { 
....................          #IF LONG_POINTERS 
....................          *((long *)endptr)= s;  
....................          #ELSE 
....................          *((char *)endptr)=s; 
....................          #ENDIF 
....................       } 
....................    return 0; 
....................    } 
....................    if(sign=='-') 
....................       x  =-x; 
....................    if (endptr) 
....................    { 
....................         #IF LONG_POINTERS 
....................          *((long *)endptr)= sc;  
....................         #ELSE 
....................         *((char *)endptr)=sc; 
....................         #ENDIF 
....................    } 
....................    return x; 
.................... } 
....................  
.................... signed int8 system(char *string) 
.................... { 
....................    return 0; 
.................... } 
....................  
.................... int8 mblen(char *s,size_t n) 
.................... { 
....................    return strlen(s); 
.................... } 
....................  
.................... int8 mbtowc(wchar_t *pwc,char *s,size_t n) 
.................... { 
....................    *pwc=*s; 
....................    return 1; 
.................... } 
....................  
.................... int8 wctomb(char *s,wchar_t wchar) 
.................... { 
....................    *s=wchar; 
....................    return 1; 
.................... } 
....................  
.................... size_t mbstowcs(wchar_t *pwcs,char *s,size_t n) 
.................... { 
....................    strncpy(pwcs,s,n); 
....................    return strlen(pwcs); 
.................... } 
....................  
.................... size_t wcstombs(char *s,wchar_t *pwcs,size_t n) 
.................... { 
....................    strncpy(s,pwcs,n); 
....................    return strlen(s); 
.................... } 
....................  
.................... //--------------------------------------------------------------------------- 
.................... // The random number implementation 
.................... //--------------------------------------------------------------------------- 
....................  
.................... unsigned int32 _Randseed; 
....................  
.................... unsigned int16 rand(void) 
.................... { 
....................    _Randseed = _Randseed * 1103515245 + 12345; 
*
04F4:  MOVFF  09,3B
04F8:  MOVFF  08,3A
04FC:  MOVFF  07,39
0500:  MOVFF  06,38
0504:  MOVLW  41
0506:  MOVWF  3F
0508:  MOVLW  C6
050A:  MOVWF  3E
050C:  MOVLW  4E
050E:  MOVWF  3D
0510:  MOVLW  6D
0512:  MOVWF  3C
0514:  RCALL  030C
0516:  MOVLW  39
0518:  ADDWF  00,W
051A:  MOVWF  06
051C:  MOVLW  30
051E:  ADDWFC 01,W
0520:  MOVWF  07
0522:  MOVLW  00
0524:  ADDWFC 02,W
0526:  MOVWF  08
0528:  MOVLW  00
052A:  ADDWFC 03,W
052C:  MOVWF  09
....................    return ((unsigned int16)(_Randseed >> 16) % RAND_MAX); 
052E:  MOVFF  08,00
0532:  MOVFF  09,01
0536:  CLRF   02
0538:  CLRF   03
053A:  MOVFF  09,3A
053E:  MOVFF  08,39
0542:  MOVFF  09,3C
0546:  MOVFF  08,3B
054A:  MOVLW  7F
054C:  MOVWF  3E
054E:  MOVLW  FF
0550:  MOVWF  3D
0552:  BRA    04B0
0554:  MOVFF  00,01
0558:  MOVFF  03,02
.................... } 
055C:  GOTO   06C2 (RETURN)
....................  
.................... void srand(unsigned int32 seed) 
.................... { 
....................    _Randseed = seed; 
.................... } 
....................  
.................... //--------------------------------------------------------------------------- 
.................... // Searching and sorting utilities implementation 
.................... //--------------------------------------------------------------------------- 
....................  
.................... #if !defined(__PCD__) 
.................... typedef signed int8 (*_Cmpfun)(char * p1,char * p2);  
.................... #else  
.................... typedef signed int16 (*_Cmpfun)(char * p1,char * p2);  
.................... #endif 
....................  
....................  
....................  
.................... void qsort(char * qdata, unsigned int qitems, unsigned int qsize, _Cmpfun cmp) { 
....................    unsigned int m,j,i,l; 
....................    int1 done; 
....................    BYTE t[16]; 
....................  
....................    m = qitems/2; 
....................    while( m > 0 ) { 
....................      for(j=0; j<(qitems-m); ++j) { 
....................         i = j; 
....................         do 
....................         { 
....................            done=TRUE; 
....................            l = i+m; 
....................            if( (*cmp)(qdata+i*qsize, qdata+l*qsize) > 0 ) { 
....................               memcpy(t, qdata+i*qsize, qsize); 
....................               memcpy(qdata+i*qsize, qdata+l*qsize, qsize); 
....................               memcpy(qdata+l*qsize, t, qsize); 
....................               if(m <= i) 
....................                 i -= m; 
....................                 done = FALSE; 
....................            } 
....................         } while(!done); 
....................      } 
....................      m = m/2; 
....................    } 
.................... } 
....................  
....................  
.................... char *bsearch(char *key, char *base, size_t num, size_t width,_Cmpfun cmp) 
.................... { 
....................    char *p, *q; 
....................    size_t n; 
....................    size_t pivot; 
....................    signed int val; 
....................  
....................    p = base; 
....................    n = num; 
....................  
....................    while (n > 0) 
....................    { 
....................       pivot = n >> 1; 
....................       q = p + width * pivot; 
....................  
....................       val = (*cmp)(key, q); 
....................  
....................       if (val < 0) 
....................          n = pivot; 
....................       else if (val == 0) 
....................          return ((char *)q); 
....................       else { 
....................          p = q + width; 
....................          n -= pivot + 1; 
....................       } 
....................    } 
....................  
....................    return NULL;      // There's no match 
.................... } 
....................  
....................  
.................... #endif 
....................  
....................  
....................  
.................... #define RAND_MAX 25000 
.................... #define PORTRAIT 0 
.................... #define LANDSCAPE 1 
.................... #define RANDC 1 
....................  
.................... #define CD_DATA  {\ 
....................                   output_low(LCD_CS); \ 
....................                   output_high(LCD_RS);\ 
....................                   output_high(LCD_RD);\ 
....................                   output_high(LCD_WR);\ 
....................                   } 
....................  
.................... int1 rcolor; 
.................... void mkhigh(){ 
....................    output_high(LCD_CS); 
....................    output_high(LCD_RS); 
....................    output_high(LCD_RD); 
....................    output_high(LCD_WR); 
.................... } 
.................... void write_addr(int8 x){ 
....................    output_low(LCD_CS); 
*
002A:  BCF    F94.1
002C:  BCF    F8B.1
....................    output_low(LCD_RS); 
002E:  BCF    F94.2
0030:  BCF    F8B.2
....................    output_high(LCD_RD); 
0032:  BCF    F94.4
0034:  BSF    F8B.4
....................    output_high(LCD_WR); 
0036:  BCF    F94.3
0038:  BSF    F8B.3
....................    output_a(0x00); 
003A:  CLRF   F92
003C:  CLRF   F89
....................    output_low(LCD_WR); 
003E:  BCF    F94.3
0040:  BCF    F8B.3
....................    delay_us(10); 
0042:  MOVLW  1A
0044:  MOVWF  00
0046:  DECFSZ 00,F
0048:  BRA    0046
004A:  NOP   
....................    output_high(LCD_WR); 
004C:  BCF    F94.3
004E:  BSF    F8B.3
....................    output_a(x); 
0050:  CLRF   F92
0052:  MOVFF  45,F89
....................    output_low(LCD_WR); 
0056:  BCF    F94.3
0058:  BCF    F8B.3
....................    delay_us(10); 
005A:  MOVLW  1A
005C:  MOVWF  00
005E:  DECFSZ 00,F
0060:  BRA    005E
0062:  NOP   
....................    output_high(LCD_WR); 
0064:  BCF    F94.3
0066:  BSF    F8B.3
....................    output_high(LCD_RS); 
0068:  BCF    F94.2
006A:  BSF    F8B.2
.................... } 
006C:  RETLW  00
.................... int16 reg_read(){ 
....................    int16 value; 
....................     
....................    output_low(LCD_CS); 
....................    output_high(LCD_RS); 
....................    output_high(LCD_RD); 
....................    output_high(LCD_WR); 
....................    output_low(LCD_RD); 
....................    delay_us(10); 
....................    value = input_a()<<8; 
....................    output_high(LCD_RD); 
....................    delay_us(10); 
....................  
....................    output_low(LCD_RD); 
....................    delay_us(10); 
....................  
....................    value |= input_a(); 
....................  
....................    output_high(LCD_RD); 
....................    output_high(LCD_CS); 
....................    return value; 
....................  
.................... } 
.................... void writegram(int16 data){ 
....................       int8 lo,hi; 
....................       hi = data>>8; 
*
0360:  MOVFF  43,45
....................       lo = data; 
0364:  MOVFF  42,44
....................       output_a(lo); 
0368:  CLRF   F92
036A:  MOVFF  44,F89
....................       output_low(LCD_WR); 
036E:  BCF    F94.3
0370:  BCF    F8B.3
....................       delay_us(10); 
0372:  MOVLW  1A
0374:  MOVWF  00
0376:  DECFSZ 00,F
0378:  BRA    0376
037A:  NOP   
....................       output_high(LCD_WR); 
037C:  BCF    F94.3
037E:  BSF    F8B.3
....................       output_a(hi); 
0380:  CLRF   F92
0382:  MOVFF  45,F89
....................       output_low(LCD_WR); 
0386:  BCF    F94.3
0388:  BCF    F8B.3
....................       delay_us(10); 
038A:  MOVLW  1A
038C:  MOVWF  00
038E:  DECFSZ 00,F
0390:  BRA    038E
0392:  NOP   
....................       output_high(LCD_WR); 
0394:  BCF    F94.3
0396:  BSF    F8B.3
.................... } 
0398:  RETLW  00
.................... void writereg(int8 addr ,int16 data){ 
....................       write_addr(addr); 
*
00AA:  MOVFF  42,45
00AE:  RCALL  002A
....................       output_low(LCD_CS); 
00B0:  BCF    F94.1
00B2:  BCF    F8B.1
....................       output_high(LCD_RS); 
00B4:  BCF    F94.2
00B6:  BSF    F8B.2
....................       output_high(LCD_RD); 
00B8:  BCF    F94.4
00BA:  BSF    F8B.4
....................       output_high(LCD_WR); 
00BC:  BCF    F94.3
00BE:  BSF    F8B.3
....................       output_a(make8(data,1)); 
00C0:  CLRF   F92
00C2:  MOVFF  44,F89
....................       output_low(LCD_WR); 
00C6:  BCF    F94.3
00C8:  BCF    F8B.3
....................       delay_us(10); 
00CA:  MOVLW  1A
00CC:  MOVWF  00
00CE:  DECFSZ 00,F
00D0:  BRA    00CE
00D2:  NOP   
....................       output_high(LCD_WR); 
00D4:  BCF    F94.3
00D6:  BSF    F8B.3
....................       output_a(make8(data,0)); 
00D8:  CLRF   F92
00DA:  MOVFF  43,F89
....................       output_low(LCD_WR); 
00DE:  BCF    F94.3
00E0:  BCF    F8B.3
....................       delay_us(10); 
00E2:  MOVLW  1A
00E4:  MOVWF  00
00E6:  DECFSZ 00,F
00E8:  BRA    00E6
00EA:  NOP   
....................       output_high(LCD_WR); 
00EC:  BCF    F94.3
00EE:  BSF    F8B.3
....................       output_high(LCD_CS); 
00F0:  BCF    F94.1
00F2:  BSF    F8B.1
.................... } 
00F4:  RETLW  00
....................  
.................... void reset(){ 
*
006E:  CLRF   17
....................  
....................    int8 i =0; 
....................    output_high(LCD_CS); 
0070:  BCF    F94.1
0072:  BSF    F8B.1
....................    output_high(LCD_WR); 
0074:  BCF    F94.3
0076:  BSF    F8B.3
....................    output_high(LCD_RD);  
0078:  BCF    F94.4
007A:  BSF    F8B.4
....................    output_low(LCD_RST); 
007C:  BCF    F94.0
007E:  BCF    F8B.0
....................    delay_ms(2); 
0080:  MOVLW  02
0082:  MOVWF  18
0084:  RCALL  0004
....................    output_high(LCD_RST);  
0086:  BCF    F94.0
0088:  BSF    F8B.0
....................    output_low(LCD_CS); 
008A:  BCF    F94.1
008C:  BCF    F8B.1
....................    write_addr(0x00);  
008E:  CLRF   45
0090:  RCALL  002A
....................    for(i=0;i<3;i++){ 
0092:  CLRF   17
0094:  MOVF   17,W
0096:  SUBLW  02
0098:  BNC   00A6
....................    output_low(LCD_WR); 
009A:  BCF    F94.3
009C:  BCF    F8B.3
....................    output_high(LCD_WR); 
009E:  BCF    F94.3
00A0:  BSF    F8B.3
....................      } 
00A2:  INCF   17,F
00A4:  BRA    0094
....................  
.................... } 
00A6:  GOTO   0850 (RETURN)
.................... void lcd_init(){ 
....................    //writereg(0xE5, 0x78F0); 
....................    //writereg(START_OSC, 0x0001); 
....................    //delay_ms(50); 
....................    writereg(DRIV_OUT_CTRL, 0x0100); 
*
00F6:  MOVLW  01
00F8:  MOVWF  42
00FA:  MOVWF  44
00FC:  CLRF   43
00FE:  RCALL  00AA
....................    writereg(DRIV_WAV_CTRL, 0x0700); 
0100:  MOVLW  02
0102:  MOVWF  42
0104:  MOVLW  07
0106:  MOVWF  44
0108:  CLRF   43
010A:  RCALL  00AA
....................     
....................    writereg(ENTRY_MOD, 0x1020); 
010C:  MOVLW  03
010E:  MOVWF  42
0110:  MOVLW  10
0112:  MOVWF  44
0114:  MOVLW  20
0116:  MOVWF  43
0118:  RCALL  00AA
....................    writereg(RESIZE_CTRL,0x0000); 
011A:  MOVLW  04
011C:  MOVWF  42
011E:  CLRF   44
0120:  CLRF   43
0122:  RCALL  00AA
....................    writereg(DISP_CTRL2,0x0202); 
0124:  MOVLW  08
0126:  MOVWF  42
0128:  MOVLW  02
012A:  MOVWF  44
012C:  MOVWF  43
012E:  RCALL  00AA
....................    writereg(DISP_CTRL3,0x0000); 
0130:  MOVLW  09
0132:  MOVWF  42
0134:  CLRF   44
0136:  CLRF   43
0138:  RCALL  00AA
....................    writereg(DISP_CTRL4,0x0000); 
013A:  MOVLW  0A
013C:  MOVWF  42
013E:  CLRF   44
0140:  CLRF   43
0142:  RCALL  00AA
....................    writereg(RGB_DISP_IF_CTRL1,0x0000); 
0144:  MOVLW  0C
0146:  MOVWF  42
0148:  CLRF   44
014A:  CLRF   43
014C:  RCALL  00AA
....................    writereg(FRM_MARKER_POS,0x0); 
014E:  MOVLW  0D
0150:  MOVWF  42
0152:  CLRF   44
0154:  CLRF   43
0156:  RCALL  00AA
....................    writereg(RGB_DISP_IF_CTRL2,0x0); 
0158:  MOVLW  0F
015A:  MOVWF  42
015C:  CLRF   44
015E:  CLRF   43
0160:  RCALL  00AA
....................    writereg(POW_CTRL1,0x0000); 
0162:  MOVLW  10
0164:  MOVWF  42
0166:  CLRF   44
0168:  CLRF   43
016A:  RCALL  00AA
....................    writereg(POW_CTRL2,0x0007); 
016C:  MOVLW  11
016E:  MOVWF  42
0170:  CLRF   44
0172:  MOVLW  07
0174:  MOVWF  43
0176:  RCALL  00AA
....................    writereg(POW_CTRL3,0x0000); 
0178:  MOVLW  12
017A:  MOVWF  42
017C:  CLRF   44
017E:  CLRF   43
0180:  RCALL  00AA
....................    writereg(POW_CTRL4,0x0000); 
0182:  MOVLW  13
0184:  MOVWF  42
0186:  CLRF   44
0188:  CLRF   43
018A:  RCALL  00AA
....................    delay_ms(200); 
018C:  MOVLW  C8
018E:  MOVWF  18
0190:  RCALL  0004
....................    writereg(POW_CTRL1,0x1690); 
0192:  MOVLW  10
0194:  MOVWF  42
0196:  MOVLW  16
0198:  MOVWF  44
019A:  MOVLW  90
019C:  MOVWF  43
019E:  RCALL  00AA
....................    writereg(POW_CTRL2,0x0227); 
01A0:  MOVLW  11
01A2:  MOVWF  42
01A4:  MOVLW  02
01A6:  MOVWF  44
01A8:  MOVLW  27
01AA:  MOVWF  43
01AC:  RCALL  00AA
....................    delay_ms(50); 
01AE:  MOVLW  32
01B0:  MOVWF  18
01B2:  RCALL  0004
....................    writereg(POW_CTRL3,0x001A); 
01B4:  MOVLW  12
01B6:  MOVWF  42
01B8:  CLRF   44
01BA:  MOVLW  1A
01BC:  MOVWF  43
01BE:  RCALL  00AA
....................    delay_ms(50); 
01C0:  MOVLW  32
01C2:  MOVWF  18
01C4:  RCALL  0004
....................    writereg(POW_CTRL4,0x1800); 
01C6:  MOVLW  13
01C8:  MOVWF  42
01CA:  MOVLW  18
01CC:  MOVWF  44
01CE:  CLRF   43
01D0:  RCALL  00AA
....................    writereg(POW_CTRL7,0x002A); 
01D2:  MOVLW  29
01D4:  MOVWF  42
01D6:  CLRF   44
01D8:  MOVLW  2A
01DA:  MOVWF  43
01DC:  RCALL  00AA
....................    delay_ms(50); 
01DE:  MOVLW  32
01E0:  MOVWF  18
01E2:  RCALL  0004
....................    writereg(GAMMA_CTRL1,0x0000); 
01E4:  MOVLW  30
01E6:  MOVWF  42
01E8:  CLRF   44
01EA:  CLRF   43
01EC:  RCALL  00AA
....................    writereg(GAMMA_CTRL2,0x0000); 
01EE:  MOVLW  31
01F0:  MOVWF  42
01F2:  CLRF   44
01F4:  CLRF   43
01F6:  RCALL  00AA
....................    writereg(GAMMA_CTRL3,0x0000); 
01F8:  MOVLW  32
01FA:  MOVWF  42
01FC:  CLRF   44
01FE:  CLRF   43
0200:  RCALL  00AA
....................    writereg(GAMMA_CTRL4,0x0206); 
0202:  MOVLW  35
0204:  MOVWF  42
0206:  MOVLW  02
0208:  MOVWF  44
020A:  MOVLW  06
020C:  MOVWF  43
020E:  RCALL  00AA
....................    writereg(GAMMA_CTRL5,0x0808); 
0210:  MOVLW  36
0212:  MOVWF  42
0214:  MOVLW  08
0216:  MOVWF  44
0218:  MOVWF  43
021A:  RCALL  00AA
....................    writereg(GAMMA_CTRL6,0x0007); 
021C:  MOVLW  37
021E:  MOVWF  42
0220:  CLRF   44
0222:  MOVLW  07
0224:  MOVWF  43
0226:  RCALL  00AA
....................    writereg(GAMMA_CTRL7,0x0201); 
0228:  MOVLW  38
022A:  MOVWF  42
022C:  MOVLW  02
022E:  MOVWF  44
0230:  MOVLW  01
0232:  MOVWF  43
0234:  RCALL  00AA
....................    writereg(GAMMA_CTRL8,0x0000); 
0236:  MOVLW  39
0238:  MOVWF  42
023A:  CLRF   44
023C:  CLRF   43
023E:  RCALL  00AA
....................    writereg(GAMMA_CTRL9,0x0000); 
0240:  MOVLW  3C
0242:  MOVWF  42
0244:  CLRF   44
0246:  CLRF   43
0248:  RCALL  00AA
....................    writereg(GAMMA_CTRL10,0x0000); 
024A:  MOVLW  3D
024C:  MOVWF  42
024E:  CLRF   44
0250:  CLRF   43
0252:  RCALL  00AA
....................    writereg(GRAM_HOR_AD,0x0000); 
0254:  MOVLW  20
0256:  MOVWF  42
0258:  CLRF   44
025A:  CLRF   43
025C:  RCALL  00AA
....................    writereg(GRAM_VER_AD,0x0000); 
025E:  MOVLW  21
0260:  MOVWF  42
0262:  CLRF   44
0264:  CLRF   43
0266:  RCALL  00AA
....................    writereg(HOR_START_AD,0x0000); 
0268:  MOVLW  50
026A:  MOVWF  42
026C:  CLRF   44
026E:  CLRF   43
0270:  RCALL  00AA
....................    writereg(HOR_END_AD, 0x00EF); 
0272:  MOVLW  51
0274:  MOVWF  42
0276:  CLRF   44
0278:  MOVLW  EF
027A:  MOVWF  43
027C:  RCALL  00AA
....................    writereg(VER_START_AD, 0X0000); 
027E:  MOVLW  52
0280:  MOVWF  42
0282:  CLRF   44
0284:  CLRF   43
0286:  RCALL  00AA
....................    writereg(VER_END_AD, 0x013F); 
0288:  MOVLW  53
028A:  MOVWF  42
028C:  MOVLW  01
028E:  MOVWF  44
0290:  MOVLW  3F
0292:  MOVWF  43
0294:  RCALL  00AA
....................    writereg(GATE_SCAN_CTRL1, 0x2700); // Driver Output Control (R60h) 
0296:  MOVLW  60
0298:  MOVWF  42
029A:  MOVLW  27
029C:  MOVWF  44
029E:  CLRF   43
02A0:  RCALL  00AA
....................    writereg(GATE_SCAN_CTRL2, 0x0001); // Driver Output Control (R61h) 
02A2:  MOVLW  61
02A4:  MOVWF  42
02A6:  CLRF   44
02A8:  MOVLW  01
02AA:  MOVWF  43
02AC:  RCALL  00AA
....................    writereg(GATE_SCAN_CTRL3,0x0000); // Driver Output Control (R62h) 
02AE:  MOVLW  6A
02B0:  MOVWF  42
02B2:  CLRF   44
02B4:  CLRF   43
02B6:  RCALL  00AA
....................    writereg(PANEL_IF_CTRL1, 0X0010); // Panel Interface Control 1 (R90h) 
02B8:  MOVLW  90
02BA:  MOVWF  42
02BC:  CLRF   44
02BE:  MOVLW  10
02C0:  MOVWF  43
02C2:  RCALL  00AA
....................    writereg(PANEL_IF_CTRL2, 0X0000); 
02C4:  MOVLW  92
02C6:  MOVWF  42
02C8:  CLRF   44
02CA:  CLRF   43
02CC:  RCALL  00AA
....................    writereg(PANEL_IF_CTRL3, 0X0003); 
02CE:  MOVLW  93
02D0:  MOVWF  42
02D2:  CLRF   44
02D4:  MOVLW  03
02D6:  MOVWF  43
02D8:  RCALL  00AA
....................    writereg(PANEL_IF_CTRL4, 0X1100); 
02DA:  MOVLW  95
02DC:  MOVWF  42
02DE:  MOVLW  11
02E0:  MOVWF  44
02E2:  CLRF   43
02E4:  RCALL  00AA
....................    writereg(PANEL_IF_CTRL5, 0X0000); 
02E6:  MOVLW  97
02E8:  MOVWF  42
02EA:  CLRF   44
02EC:  CLRF   43
02EE:  RCALL  00AA
....................    writereg(PANEL_IF_CTRL6, 0X0000); 
02F0:  MOVLW  98
02F2:  MOVWF  42
02F4:  CLRF   44
02F6:  CLRF   43
02F8:  RCALL  00AA
....................    writereg(DISP_CTRL1, 0x0133); // Main screen turn on 
02FA:  MOVLW  07
02FC:  MOVWF  42
02FE:  MOVLW  01
0300:  MOVWF  44
0302:  MOVLW  33
0304:  MOVWF  43
0306:  RCALL  00AA
....................  
.................... } 
0308:  GOTO   0852 (RETURN)
.................... void set_pointer(unsigned int16 x1,unsigned int16 y1,unsigned int16 x2,unsigned int16 y2){ 
....................    //ILI9325 has 240x320 pixel 
....................    writereg(0x20,x1); 
....................    writereg(0x21,y1); 
....................    writereg(0x50, x1); 
....................    writereg(0x51, x2); 
....................    writereg(0x52, y1); 
....................    writereg(0x53, y2); 
....................    output_low(LCD_CS); 
....................  
.................... } 
.................... void fill(int16 color){ 
*
039A:  CLRF   1C
039C:  CLRF   1B
039E:  MOVLW  01
03A0:  MOVWF  1A
03A2:  MOVLW  40
03A4:  MOVWF  19
....................   
....................    int32 i=320; 
....................    i *=240; 
03A6:  MOVFF  1C,3B
03AA:  MOVFF  1B,3A
03AE:  MOVFF  1A,39
03B2:  MOVFF  19,38
03B6:  CLRF   3F
03B8:  CLRF   3E
03BA:  CLRF   3D
03BC:  MOVLW  F0
03BE:  MOVWF  3C
03C0:  RCALL  030C
03C2:  MOVFF  03,1C
03C6:  MOVFF  02,1B
03CA:  MOVFF  01,1A
03CE:  MOVFF  00,19
....................    writereg(0x20,0x0); 
03D2:  MOVLW  20
03D4:  MOVWF  42
03D6:  CLRF   44
03D8:  CLRF   43
03DA:  RCALL  00AA
....................    writereg(0x21,0x0); 
03DC:  MOVLW  21
03DE:  MOVWF  42
03E0:  CLRF   44
03E2:  CLRF   43
03E4:  RCALL  00AA
....................    write_addr(0x22); 
03E6:  MOVLW  22
03E8:  MOVWF  45
03EA:  RCALL  002A
....................     
....................    CD_DATA; 
03EC:  BCF    F94.1
03EE:  BCF    F8B.1
03F0:  BCF    F94.2
03F2:  BSF    F8B.2
03F4:  BCF    F94.4
03F6:  BSF    F8B.4
03F8:  BCF    F94.3
03FA:  BSF    F8B.3
....................    while(i--){ 
03FC:  MOVFF  1C,03
0400:  MOVFF  1B,02
0404:  MOVFF  1A,01
0408:  MOVFF  19,00
040C:  MOVLW  FF
040E:  ADDWF  19,F
0410:  BTFSS  FD8.0
0412:  ADDWF  1A,F
0414:  BTFSS  FD8.0
0416:  ADDWF  1B,F
0418:  BTFSS  FD8.0
041A:  ADDWF  1C,F
041C:  MOVF   00,F
041E:  BNZ   042C
0420:  MOVF   01,F
0422:  BNZ   042C
0424:  MOVF   02,F
0426:  BNZ   042C
0428:  MOVF   03,F
042A:  BZ    0438
....................    writegram(color); 
042C:  MOVFF  18,43
0430:  MOVFF  17,42
0434:  RCALL  0360
....................    } 
0436:  BRA    03FC
....................    output_high(LCD_CS); 
0438:  BCF    F94.1
043A:  BSF    F8B.1
.................... } 
043C:  GOTO   0858 (RETURN)
....................  
....................  
.................... void drawpixel(int16 x,int16 y, int16 color){ 
....................    
....................    
....................   writereg(0x20,y); 
*
0560:  MOVLW  20
0562:  MOVWF  42
0564:  MOVFF  3F,44
0568:  MOVFF  3E,43
056C:  RCALL  00AA
....................   writereg(0x21,x); 
056E:  MOVLW  21
0570:  MOVWF  42
0572:  MOVFF  3D,44
0576:  MOVFF  3C,43
057A:  RCALL  00AA
....................    
....................    
....................   write_addr(0x22); 
057C:  MOVLW  22
057E:  MOVWF  45
0580:  RCALL  002A
....................   CD_DATA; 
0582:  BCF    F94.1
0584:  BCF    F8B.1
0586:  BCF    F94.2
0588:  BSF    F8B.2
058A:  BCF    F94.4
058C:  BSF    F8B.4
058E:  BCF    F94.3
0590:  BSF    F8B.3
....................   writegram(color); 
0592:  MOVFF  41,43
0596:  MOVFF  40,42
059A:  RCALL  0360
....................    
.................... } 
059C:  GOTO   0722 (RETURN)
....................  
....................  
.................... void showchar(char m, int16 x, int y) 
.................... {       
....................         int16 line; 
....................         switch(m){ 
....................         case 'A':line = 0; 
....................         break; 
....................         case 'H':line = 186; 
....................         break; 
....................         case 'O':line = 372; 
....................         break; 
....................         case 'Y':line = 744; 
....................         break; 
....................         case 'S':line = 558; 
....................         break; 
....................          
....................          
....................         } 
....................           
....................          int16 h,w,w1; 
....................          int16 color1;         
....................          int32 temp, ref; 
....................          int16 temp2,ref2; 
....................          int16 color=0xFFFF;; 
....................          for (h=0;h<31;h++) 
....................          { 
....................            temp= make32(ahoy_buff[line],ahoy_buff[line+1],ahoy_buff[line+2],ahoy_buff[line+3]); 
....................            ref = 0x80000000; 
....................            for(w=0;w<31;w++) 
....................            { // color = rand(); 
....................               if(temp & ref) 
....................                 drawpixel(x+w,y+h,color1); 
....................               ref = ref >> 1; 
....................            } 
....................            line = line + 4; 
....................            temp2= make16(ahoy_buff[line],ahoy_buff[line+1]); 
....................            ref2 = 0x8000; 
....................            for(w1=0;w1<10;w1++) 
....................            {  //color = rand(); 
....................               if(temp2 & ref2) 
....................                 drawpixel(x+31+w1,y+h,color1); 
....................               ref2 = ref2 >> 1; 
....................                
....................            } 
....................            line = line + 2; 
....................          } 
....................           
....................  
.................... } 
....................  
.................... void logo(){ 
....................    int8 space = 2; 
....................    int16 x =10,y=90; 
....................    showchar('A',x,y); 
....................    showchar('H',x+42+space,y); 
....................    showchar('0',x+86+space,y); 
....................    showchar('Y',x+126+space,y); 
....................    showchar('S',x+168+space,y); 
....................    showchar('Y',x+210+space,y); 
....................    showchar('S',x+252+space,y);    
....................  
.................... } 
.................... /* 
.................... void printchar(int16 x,int16 y){ 
....................  
....................          
....................          int16 line = 60; 
....................          int16 h,w,w1; 
....................          int16 color = 0xFFFF;         
....................          int32 temp, ref; 
....................          int16 temp2,ref2; 
....................          for (h=0;h<20;h++) 
....................          { 
....................            temp= make16(fonts[line],fonts[line+1]); 
....................            ref = 0x8000; 
....................            for(w=0;w<16;w++) 
....................            {   
....................               if(temp & ref) 
....................                 drawpixel(x+w,y+h,color); 
....................               ref = ref >> 1; 
....................            } 
....................            line = line + 2; 
....................            temp2 = fonts[line]; 
....................            ref2 = 0x80; 
....................            for(w1=0;w1<8;w1++) 
....................            {   
....................               if(temp2 & ref2) 
....................                 drawpixel(x+31+w1,y+h,color); 
....................               ref2 = ref2 >> 1; 
....................                
....................            } 
....................            line = line + 1; 
....................          } 
....................           
....................  
.................... } 
.................... */ 
.................... void printchar1(int16 x,int16 y ,int16 line){ 
05A0:  MOVLW  FF
05A2:  MOVWF  2D
05A4:  MOVWF  2C
05A6:  MOVLW  1F
05A8:  MOVWF  36
05AA:  MOVLW  1B
05AC:  MOVWF  37
....................           
....................          int16 h,w; 
....................          int16 color = 0xFFFF; 
....................          int32 temp, ref; 
....................           
....................          int8 fwidth = 31; 
....................          int8 fheight =27; 
....................          for (h=0;h<fheight;h++) 
05AE:  CLRF   29
05B0:  CLRF   28
05B2:  MOVF   29,F
05B4:  BTFSS  FD8.2
05B6:  BRA    0744
05B8:  MOVF   37,W
05BA:  SUBWF  28,W
05BC:  BTFSC  FD8.0
05BE:  BRA    0744
....................          {  
....................            
....................               
....................            temp =make32(ffonts[line],ffonts[line+1],ffonts[line+2],ffonts[line+3]); 
05C0:  MOVLW  EE
05C2:  ADDWF  26,W
05C4:  MOVWF  38
05C6:  MOVLW  E9
05C8:  ADDWFC 27,W
05CA:  MOVWF  39
05CC:  CLRF   FF8
05CE:  MOVFF  39,FF7
05D2:  MOVFF  38,FF6
05D6:  CLRF   FEA
05D8:  MOVLW  3A
05DA:  MOVWF  FE9
05DC:  CLRF   45
05DE:  MOVLW  01
05E0:  MOVWF  44
05E2:  RCALL  0492
05E4:  MOVLW  01
05E6:  ADDWF  26,W
05E8:  MOVWF  3B
05EA:  MOVLW  00
05EC:  ADDWFC 27,W
05EE:  MOVWF  3C
05F0:  MOVLW  EE
05F2:  ADDWF  3B,F
05F4:  MOVLW  E9
05F6:  ADDWFC 3C,F
05F8:  CLRF   FF8
05FA:  MOVFF  3C,FF7
05FE:  MOVFF  3B,FF6
0602:  CLRF   FEA
0604:  MOVLW  3D
0606:  MOVWF  FE9
0608:  CLRF   45
060A:  MOVLW  01
060C:  MOVWF  44
060E:  RCALL  0492
0610:  MOVLW  02
0612:  ADDWF  26,W
0614:  MOVWF  3E
0616:  MOVLW  00
0618:  ADDWFC 27,W
061A:  MOVWF  3F
061C:  MOVLW  EE
061E:  ADDWF  3E,F
0620:  MOVLW  E9
0622:  ADDWFC 3F,F
0624:  CLRF   FF8
0626:  MOVFF  3F,FF7
062A:  MOVFF  3E,FF6
062E:  CLRF   FEA
0630:  MOVLW  40
0632:  MOVWF  FE9
0634:  CLRF   45
0636:  MOVLW  01
0638:  MOVWF  44
063A:  RCALL  0492
063C:  MOVLW  03
063E:  ADDWF  26,W
0640:  MOVWF  41
0642:  MOVLW  00
0644:  ADDWFC 27,W
0646:  MOVWF  42
0648:  MOVLW  EE
064A:  ADDWF  41,F
064C:  MOVLW  E9
064E:  ADDWFC 42,F
0650:  CLRF   FF8
0652:  MOVFF  42,FF7
0656:  MOVFF  41,FF6
065A:  CLRF   FEA
065C:  MOVLW  43
065E:  MOVWF  FE9
0660:  CLRF   45
0662:  MOVLW  01
0664:  MOVWF  44
0666:  RCALL  0492
0668:  MOVFF  3A,31
066C:  MOVFF  3D,30
0670:  MOVFF  40,2F
0674:  MOVFF  43,2E
....................            ref = 0x00000000; 
0678:  CLRF   35
067A:  CLRF   34
067C:  CLRF   33
067E:  CLRF   32
....................            bit_set(ref,fwidth); 
0680:  CLRF   03
0682:  CLRF   02
0684:  CLRF   01
0686:  MOVLW  01
0688:  MOVWF  00
068A:  MOVF   36,W
068C:  MOVWF  38
068E:  BZ    069E
0690:  BCF    FD8.0
0692:  RLCF   00,F
0694:  RLCF   01,F
0696:  RLCF   02,F
0698:  RLCF   03,F
069A:  DECFSZ 38,F
069C:  BRA    0690
069E:  MOVF   00,W
06A0:  IORWF  32,F
06A2:  MOVF   01,W
06A4:  IORWF  33,F
06A6:  MOVF   02,W
06A8:  IORWF  34,F
06AA:  MOVF   03,W
06AC:  IORWF  35,F
....................            for(w=0;w<fwidth;w++) 
06AE:  CLRF   2B
06B0:  CLRF   2A
06B2:  MOVF   2B,F
06B4:  BNZ   0734
06B6:  MOVF   36,W
06B8:  SUBWF  2A,W
06BA:  BC    0734
....................             
....................            {  
....................                if(rcolor)color =rand(); 
06BC:  BTFSS  0A.0
06BE:  BRA    06CA
06C0:  BRA    04F4
06C2:  MOVFF  02,2D
06C6:  MOVFF  01,2C
....................                 
....................             
....................                if(temp & ref) 
06CA:  MOVF   2E,W
06CC:  ANDWF  32,W
06CE:  MOVWF  00
06D0:  MOVF   2F,W
06D2:  ANDWF  33,W
06D4:  MOVWF  01
06D6:  MOVF   30,W
06D8:  ANDWF  34,W
06DA:  MOVWF  02
06DC:  MOVF   31,W
06DE:  ANDWF  35,W
06E0:  MOVWF  03
06E2:  MOVF   00,F
06E4:  BNZ   06F2
06E6:  MOVF   01,F
06E8:  BNZ   06F2
06EA:  MOVF   02,F
06EC:  BNZ   06F2
06EE:  MOVF   03,F
06F0:  BZ    0722
....................                
....................                 drawpixel(x+w,y+h,color); 
06F2:  MOVF   2A,W
06F4:  ADDWF  22,W
06F6:  MOVWF  38
06F8:  MOVF   2B,W
06FA:  ADDWFC 23,W
06FC:  MOVWF  39
06FE:  MOVF   28,W
0700:  ADDWF  24,W
0702:  MOVWF  3A
0704:  MOVF   29,W
0706:  ADDWFC 25,W
0708:  MOVWF  3B
070A:  MOVFF  39,3D
070E:  MOVFF  38,3C
0712:  MOVWF  3F
0714:  MOVFF  3A,3E
0718:  MOVFF  2D,41
071C:  MOVFF  2C,40
0720:  BRA    0560
....................                
....................               
....................               ref = ref >> 1; 
0722:  BCF    FD8.0
0724:  RRCF   35,F
0726:  RRCF   34,F
0728:  RRCF   33,F
072A:  RRCF   32,F
....................                
....................            } 
072C:  INCF   2A,F
072E:  BTFSC  FD8.2
0730:  INCF   2B,F
0732:  BRA    06B2
....................             
....................            line = line + 4;           
0734:  MOVLW  04
0736:  ADDWF  26,F
0738:  MOVLW  00
073A:  ADDWFC 27,F
....................                
....................            } 
073C:  INCF   28,F
073E:  BTFSC  FD8.2
0740:  INCF   29,F
0742:  BRA    05B2
....................           
....................           
....................           
....................           
.................... } 
0744:  RETLW  00
....................           
.................... void printword(char *word, int16 x ,int16 y){ 
0746:  MOVFF  19,23
074A:  MOVFF  18,22
074E:  BRA    0440
0750:  MOVFF  01,21
....................    int16 line; 
....................    int8 i; 
....................    int size = strlen(word); 
....................    for(i=0;i<size;i++){ 
0754:  CLRF   20
0756:  MOVF   21,W
0758:  SUBWF  20,W
075A:  BC    080E
....................       if(word[i]<59){ 
075C:  CLRF   03
075E:  MOVF   20,W
0760:  ADDWF  18,W
0762:  MOVWF  FE9
0764:  MOVF   19,W
0766:  ADDWFC 03,W
0768:  MOVWF  FEA
076A:  MOVF   FEF,W
076C:  SUBLW  3A
076E:  BNC   07BC
....................       line = (word[i]-'0')*(int16)108; 
0770:  CLRF   03
0772:  MOVF   20,W
0774:  ADDWF  18,W
0776:  MOVWF  FE9
0778:  MOVF   19,W
077A:  ADDWFC 03,W
077C:  MOVWF  FEA
077E:  MOVLW  30
0780:  SUBWF  FEF,W
0782:  MOVWF  23
0784:  CLRF   25
0786:  MOVWF  24
0788:  CLRF   27
078A:  MOVLW  6C
078C:  MOVWF  26
078E:  RCALL  0474
0790:  MOVFF  02,1F
0794:  MOVFF  01,1E
....................       //printf("%c index is %Ld\n\r",word[i],line); 
....................       printchar1(x,y,line); 
0798:  MOVFF  1B,23
079C:  MOVFF  1A,22
07A0:  MOVFF  1D,25
07A4:  MOVFF  1C,24
07A8:  MOVFF  1F,27
07AC:  MOVFF  1E,26
07B0:  RCALL  05A0
....................       x=x+31; 
07B2:  MOVLW  1F
07B4:  ADDWF  1A,F
07B6:  MOVLW  00
07B8:  ADDWFC 1B,F
....................        
....................       } 
....................       else{ 
07BA:  BRA    080A
....................        
....................       line = ((word[i]-'A')*(int16)108)+1080; 
07BC:  CLRF   03
07BE:  MOVF   20,W
07C0:  ADDWF  18,W
07C2:  MOVWF  FE9
07C4:  MOVF   19,W
07C6:  ADDWFC 03,W
07C8:  MOVWF  FEA
07CA:  MOVLW  41
07CC:  SUBWF  FEF,W
07CE:  MOVWF  23
07D0:  CLRF   25
07D2:  MOVWF  24
07D4:  CLRF   27
07D6:  MOVLW  6C
07D8:  MOVWF  26
07DA:  RCALL  0474
07DC:  MOVLW  38
07DE:  ADDWF  01,W
07E0:  MOVWF  1E
07E2:  MOVLW  04
07E4:  ADDWFC 02,W
07E6:  MOVWF  1F
....................       //printf("%c index is %Ld\n\r",word[i],line); 
....................      printchar1(x,y,line); 
07E8:  MOVFF  1B,23
07EC:  MOVFF  1A,22
07F0:  MOVFF  1D,25
07F4:  MOVFF  1C,24
07F8:  MOVFF  1F,27
07FC:  MOVFF  1E,26
0800:  RCALL  05A0
....................       x =x+31; 
0802:  MOVLW  1F
0804:  ADDWF  1A,F
0806:  MOVLW  00
0808:  ADDWFC 1B,F
....................        
....................       } 
....................        
....................        
....................        
....................        
....................     
....................    } 
080A:  INCF   20,F
080C:  BRA    0756
....................  
....................        
....................        
....................        
....................        
....................  
....................  
.................... } 
080E:  RETLW  00
....................  
....................  
....................  
....................  
....................  
....................  
.................... void main(){ 
0810:  CLRF   FF8
0812:  BCF    FD0.7
0814:  CLRF   FEA
0816:  CLRF   FE9
0818:  MOVLW  60
081A:  MOVWF  FD3
081C:  MOVLW  40
081E:  MOVWF  F9B
0820:  MOVF   FD3,W
0822:  BSF    FB8.3
0824:  MOVLW  40
0826:  MOVWF  FAF
0828:  MOVLW  03
082A:  MOVWF  FB0
082C:  MOVLW  A6
082E:  MOVWF  FAC
0830:  MOVLW  90
0832:  MOVWF  FAB
0834:  MOVLW  00
0836:  MOVWF  F7E
0838:  BCF    FC1.4
083A:  BCF    FC1.5
083C:  MOVF   F7F,W
083E:  ANDLW  E0
0840:  MOVWF  F7F
0842:  BCF    F79.5
0844:  BCF    F79.4
0846:  CLRF   F7A
0848:  CLRF   F7B
084A:  CLRF   04
084C:  CLRF   05
....................  
....................    reset(); 
084E:  BRA    006E
....................    lcd_init(); 
0850:  BRA    00F6
....................    fill(0x0); 
0852:  CLRF   18
0854:  CLRF   17
0856:  BRA    039A
....................       char *hello = "HELLO"; 
0858:  MOVLW  48
085A:  MOVWF  0B
085C:  MOVLW  45
085E:  MOVWF  0C
0860:  MOVLW  4C
0862:  MOVWF  0D
0864:  MOVWF  0E
0866:  MOVLW  4F
0868:  MOVWF  0F
086A:  CLRF   10
....................       char *world = "WORLD"; 
086C:  MOVLW  57
086E:  MOVWF  11
0870:  MOVLW  4F
0872:  MOVWF  12
0874:  MOVLW  52
0876:  MOVWF  13
0878:  MOVLW  4C
087A:  MOVWF  14
087C:  MOVLW  44
087E:  MOVWF  15
0880:  CLRF   16
....................    printword(*hello,10,10); 
0882:  CLRF   03
0884:  MOVLW  0B
0886:  MOVWF  FE9
0888:  MOVFF  03,FEA
088C:  MOVFF  FEF,17
0890:  CLRF   19
0892:  MOVFF  17,18
0896:  CLRF   1B
0898:  MOVLW  0A
089A:  MOVWF  1A
089C:  CLRF   1D
089E:  MOVWF  1C
08A0:  RCALL  0746
....................    printword(*world,10,31); 
08A2:  CLRF   03
08A4:  MOVLW  11
08A6:  MOVWF  FE9
08A8:  MOVFF  03,FEA
08AC:  MOVFF  FEF,17
08B0:  CLRF   19
08B2:  MOVFF  17,18
08B6:  CLRF   1B
08B8:  MOVLW  0A
08BA:  MOVWF  1A
08BC:  CLRF   1D
08BE:  MOVLW  1F
08C0:  MOVWF  1C
08C2:  RCALL  0746
....................     
....................  
.................... } 
08C4:  BRA    08C4

Configuration Fuses:
   Word  1: C800   INTRC_IO FCMEN IESO
   Word  2: 1E19   NOPUT NOBROWNOUT BORV20 NOWDT WDT32768
   Word  3: 8F00   CCP2C1 PBADEN LPT1OSC NODELAYINTOSC MCLR
   Word  4: 0000   NOSTVREN NOLVP NOXINST DEBUG
   Word  5: C00F   NOPROTECT NOCPB NOCPD
   Word  6: E00F   NOWRT NOWRTC NOWRTB NOWRTD
   Word  7: 400F   NOEBTR NOEBTRB

   Some fuses have been forced to be compatible with the ICD debugger.

ROM data:
00E9EE: 00 0F C0 00 00 3F F0 00 00 7F F8 00 00 7F FC 00 
00E9FE: 00 F8 7C 00 00 F8 7C 00 01 F0 3E 00 01 F0 3E 00 
00EA0E: 01 F0 3E 00 01 F0 3E 00 01 F0 3E 00 01 F0 3E 00 
00EA1E: 01 F0 3E 00 01 F0 3E 00 01 F0 3E 00 01 F0 3E 00 
00EA2E: 01 F0 3E 00 00 F8 7C 00 00 F8 FC 00 00 FF F8 00 
00EA3E: 00 7F F8 00 00 3F F0 00 00 0F C0 00 00 00 00 00 
00EA4E: 00 00 00 00 00 00 00 00 00 00 00 00 00 03 E0 00 
00EA5E: 00 0F E0 00 00 1F E0 00 00 7F E0 00 00 7B E0 00 
00EA6E: 00 63 E0 00 00 03 E0 00 00 03 E0 00 00 03 E0 00 
00EA7E: 00 03 E0 00 00 03 E0 00 00 03 E0 00 00 03 E0 00 
00EA8E: 00 03 E0 00 00 03 E0 00 00 03 E0 00 00 03 E0 00 
00EA9E: 00 03 E0 00 00 03 E0 00 00 7F FE 00 00 7F FE 00 
00EAAE: 00 7F FE 00 00 7F FE 00 00 00 00 00 00 00 00 00 
00EABE: 00 00 00 00 00 00 00 00 00 0F C0 00 00 3F F0 00 
00EACE: 00 FF F8 00 00 FF FC 00 00 E0 FC 00 00 C0 7C 00 
00EADE: 00 00 7C 00 00 00 7C 00 00 00 7C 00 00 00 F8 00 
00EAEE: 00 00 F8 00 00 01 F0 00 00 03 E0 00 00 07 E0 00 
00EAFE: 00 0F C0 00 00 1F 80 00 00 3F 00 00 00 7E 00 00 
00EB0E: 00 7C 00 00 00 FF FE 00 00 FF FE 00 00 FF FE 00 
00EB1E: 00 FF FE 00 00 00 00 00 00 00 00 00 00 00 00 00 
00EB2E: 00 00 00 00 00 0F E0 00 00 3F F0 00 00 7F F8 00 
00EB3E: 00 7F FC 00 00 70 FC 00 00 40 7C 00 00 00 7C 00 
00EB4E: 00 00 7C 00 00 01 F8 00 00 3F F0 00 00 3F C0 00 
00EB5E: 00 3F F8 00 00 3F FC 00 00 00 FC 00 00 00 7E 00 
00EB6E: 00 00 3E 00 00 00 3E 00 00 00 3E 00 00 C0 FE 00 
00EB7E: 00 FF FC 00 00 FF F8 00 00 FF F0 00 00 3F C0 00 
00EB8E: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
00EB9E: 00 03 F8 00 00 03 F8 00 00 07 F8 00 00 07 F8 00 
00EBAE: 00 0F F8 00 00 1E F8 00 00 1E F8 00 00 3C F8 00 
00EBBE: 00 3C F8 00 00 78 F8 00 00 78 F8 00 00 F0 F8 00 
00EBCE: 00 F0 F8 00 01 E0 F8 00 01 FF FF 00 01 FF FF 00 
00EBDE: 01 FF FF 00 01 FF FF 00 00 00 F8 00 00 00 F8 00 
00EBEE: 00 00 F8 00 00 00 F8 00 00 00 F8 00 00 00 00 00 
00EBFE: 00 00 00 00 00 00 00 00 00 00 00 00 00 7F FC 00 
00EC0E: 00 7F FC 00 00 7F FC 00 00 7F FC 00 00 78 00 00 
00EC1E: 00 78 00 00 00 78 00 00 00 78 00 00 00 7F E0 00 
00EC2E: 00 7F F8 00 00 7F FC 00 00 7F FC 00 00 00 FE 00 
00EC3E: 00 00 3E 00 00 00 3E 00 00 00 3E 00 00 00 3E 00 
00EC4E: 00 00 7E 00 00 C0 FC 00 00 FF FC 00 00 FF F8 00 
00EC5E: 00 FF F0 00 00 3F C0 00 00 00 00 00 00 00 00 00 
00EC6E: 00 00 00 00 00 00 00 00 00 03 F8 00 00 1F FC 00 
00EC7E: 00 3F FC 00 00 7F FC 00 00 7E 0C 00 00 F8 00 00 
00EC8E: 00 F8 00 00 00 F0 00 00 01 F0 00 00 01 F3 F0 00 
00EC9E: 01 FF F8 00 01 FF FC 00 01 FF FE 00 01 F8 7E 00 
00ECAE: 01 F0 3E 00 01 F0 3E 00 01 F0 3E 00 01 F8 3E 00 
00ECBE: 00 F8 7C 00 00 FF FC 00 00 7F F8 00 00 3F F0 00 
00ECCE: 00 0F C0 00 00 00 00 00 00 00 00 00 00 00 00 00 
00ECDE: 00 00 00 00 01 FF FC 00 01 FF FC 00 01 FF FC 00 
00ECEE: 01 FF FC 00 00 00 7C 00 00 00 F8 00 00 00 F8 00 
00ECFE: 00 01 F0 00 00 01 F0 00 00 01 E0 00 00 03 E0 00 
00ED0E: 00 03 E0 00 00 07 C0 00 00 07 C0 00 00 0F 80 00 
00ED1E: 00 0F 80 00 00 1F 00 00 00 1F 00 00 00 1F 00 00 
00ED2E: 00 3E 00 00 00 3E 00 00 00 7C 00 00 00 7C 00 00 
00ED3E: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
00ED4E: 00 0F E0 00 00 3F F0 00 00 7F F8 00 00 FF FC 00 
00ED5E: 00 FC FC 00 00 F8 7C 00 00 F8 7C 00 00 F8 7C 00 
00ED6E: 00 7C F8 00 00 7F F0 00 00 3F E0 00 00 1F E0 00 
00ED7E: 00 3F F8 00 00 7C FC 00 00 F8 7E 00 01 F0 3E 00 
00ED8E: 01 F0 3E 00 01 F0 3E 00 01 F8 7E 00 01 FF FC 00 
00ED9E: 00 FF FC 00 00 7F F8 00 00 1F E0 00 00 00 00 00 
00EDAE: 00 00 00 00 00 00 00 00 00 00 00 00 00 0F C0 00 
00EDBE: 00 3F F0 00 00 7F F8 00 00 FF FC 00 00 F8 7C 00 
00EDCE: 01 F0 7E 00 01 F0 3E 00 01 F0 3E 00 01 F0 3E 00 
00EDDE: 01 F8 7E 00 01 FF FE 00 00 FF FE 00 00 7F FE 00 
00EDEE: 00 3F BE 00 00 00 3E 00 00 00 3C 00 00 00 7C 00 
00EDFE: 00 00 7C 00 00 C1 F8 00 00 FF F8 00 00 FF F0 00 
00EE0E: 00 FF E0 00 00 3F 80 00 00 00 00 00 00 00 00 00 
00EE1E: 00 00 00 00 00 00 00 00 00 0F C0 00 00 1F C0 00 
00EE2E: 00 1F C0 00 00 1F E0 00 00 3D E0 00 00 3D E0 00 
00EE3E: 00 3D F0 00 00 78 F0 00 00 78 F0 00 00 78 F8 00 
00EE4E: 00 F8 F8 00 00 F0 78 00 00 F0 7C 00 01 F0 7C 00 
00EE5E: 01 FF FC 00 01 FF FE 00 03 FF FE 00 03 FF FE 00 
00EE6E: 03 C0 1F 00 07 C0 1F 00 07 80 1F 00 07 80 0F 80 
00EE7E: 0F 80 0F 80 00 00 00 00 00 00 00 00 00 00 00 00 
00EE8E: 00 00 00 00 01 FF E0 00 01 FF F8 00 01 FF FC 00 
00EE9E: 01 FF FE 00 01 F0 7E 00 01 F0 3E 00 01 F0 3E 00 
00EEAE: 01 F0 3E 00 01 F0 7C 00 01 FF F8 00 01 FF F0 00 
00EEBE: 01 FF FC 00 01 FF FE 00 01 F0 7F 00 01 F0 1F 00 
00EECE: 01 F0 1F 00 01 F0 1F 00 01 F0 1F 00 01 F0 3F 00 
00EEDE: 01 FF FE 00 01 FF FC 00 01 FF F8 00 01 FF E0 00 
00EEEE: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
00EEFE: 00 03 F8 00 00 0F FE 00 00 1F FF 00 00 3F FF 00 
00EF0E: 00 7E 07 00 00 FC 03 00 00 F8 00 00 00 F8 00 00 
00EF1E: 01 F0 00 00 01 F0 00 00 01 F0 00 00 01 F0 00 00 
00EF2E: 01 F0 00 00 01 F0 00 00 01 F0 00 00 01 F8 00 00 
00EF3E: 00 F8 00 00 00 FC 03 00 00 7E 07 00 00 7F FF 00 
00EF4E: 00 3F FF 00 00 1F FE 00 00 03 F8 00 00 00 00 00 
00EF5E: 00 00 00 00 00 00 00 00 00 00 00 00 07 FF 80 00 
00EF6E: 07 FF E0 00 07 FF F8 00 07 FF FC 00 07 C1 FC 00 
00EF7E: 07 C0 7E 00 07 C0 3E 00 07 C0 3F 00 07 C0 1F 00 
00EF8E: 07 C0 1F 00 07 C0 1F 00 07 C0 1F 00 07 C0 1F 00 
00EF9E: 07 C0 1F 00 07 C0 1F 00 07 C0 3F 00 07 C0 3E 00 
00EFAE: 07 C0 7E 00 07 C1 FC 00 07 FF FC 00 07 FF F8 00 
00EFBE: 07 FF E0 00 07 FF 00 00 00 00 00 00 00 00 00 00 
00EFCE: 00 00 00 00 00 00 00 00 00 FF FC 00 00 FF FC 00 
00EFDE: 00 FF FC 00 00 FF FC 00 00 F8 00 00 00 F8 00 00 
00EFEE: 00 F8 00 00 00 F8 00 00 00 F8 00 00 00 FF F8 00 
00EFFE: 00 FF F8 00 00 FF F8 00 00 FF F8 00 00 F8 00 00 
00F00E: 00 F8 00 00 00 F8 00 00 00 F8 00 00 00 F8 00 00 
00F01E: 00 F8 00 00 00 FF FC 00 00 FF FC 00 00 FF FC 00 
00F02E: 00 FF FC 00 00 00 00 00 00 00 00 00 00 00 00 00 
00F03E: 00 00 00 00 00 FF F8 00 00 FF F8 00 00 FF F8 00 
00F04E: 00 FF F8 00 00 F8 00 00 00 F8 00 00 00 F8 00 00 
00F05E: 00 F8 00 00 00 F8 00 00 00 F8 00 00 00 FF F0 00 
00F06E: 00 FF F8 00 00 FF F8 00 00 FF F0 00 00 F8 00 00 
00F07E: 00 F8 00 00 00 F8 00 00 00 F8 00 00 00 F8 00 00 
00F08E: 00 F8 00 00 00 F8 00 00 00 F8 00 00 00 F8 00 00 
00F09E: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
00F0AE: 00 07 F8 00 00 3F FE 00 00 7F FF 00 00 FF FF 00 
00F0BE: 01 FC 0F 00 03 F0 03 00 03 F0 00 00 03 E0 00 00 
00F0CE: 07 C0 00 00 07 C0 00 00 07 C1 FF 00 07 C1 FF 00 
00F0DE: 07 C1 FF 00 07 C1 FF 00 07 C0 1F 00 07 E0 1F 00 
00F0EE: 03 E0 1F 00 03 F0 1F 00 01 FC 1F 00 00 FF FF 00 
00F0FE: 00 7F FF 00 00 3F FF 00 00 0F F8 00 00 00 00 00 
00F10E: 00 00 00 00 00 00 00 00 00 00 00 00 07 C0 3E 00 
00F11E: 07 C0 3E 00 07 C0 3E 00 07 C0 3E 00 07 C0 3E 00 
00F12E: 07 C0 3E 00 07 C0 3E 00 07 C0 3E 00 07 C0 3E 00 
00F13E: 07 FF FE 00 07 FF FE 00 07 FF FE 00 07 FF FE 00 
00F14E: 07 C0 3E 00 07 C0 3E 00 07 C0 3E 00 07 C0 3E 00 
00F15E: 07 C0 3E 00 07 C0 3E 00 07 C0 3E 00 07 C0 3E 00 
00F16E: 07 C0 3E 00 07 C0 3E 00 00 00 00 00 00 00 00 00 
00F17E: 00 00 00 00 00 00 00 00 00 0F 80 00 00 0F 80 00 
00F18E: 00 0F 80 00 00 0F 80 00 00 0F 80 00 00 0F 80 00 
00F19E: 00 0F 80 00 00 0F 80 00 00 0F 80 00 00 0F 80 00 
00F1AE: 00 0F 80 00 00 0F 80 00 00 0F 80 00 00 0F 80 00 
00F1BE: 00 0F 80 00 00 0F 80 00 00 0F 80 00 00 0F 80 00 
00F1CE: 00 0F 80 00 00 0F 80 00 00 0F 80 00 00 0F 80 00 
00F1DE: 00 0F 80 00 00 00 00 00 00 00 00 00 00 00 00 00 
00F1EE: 00 00 00 00 00 03 E0 00 00 03 E0 00 00 03 E0 00 
00F1FE: 00 03 E0 00 00 03 E0 00 00 03 E0 00 00 03 E0 00 
00F20E: 00 03 E0 00 00 03 E0 00 00 03 E0 00 00 03 E0 00 
00F21E: 00 03 E0 00 00 03 E0 00 00 03 E0 00 00 03 E0 00 
00F22E: 00 03 E0 00 00 03 E0 00 00 03 E0 00 00 67 E0 00 
00F23E: 00 7F E0 00 00 7F C0 00 00 7F 80 00 00 3F 00 00 
00F24E: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
00F25E: 01 F0 1F 00 01 F0 3F 00 01 F0 3E 00 01 F0 7C 00 
00F26E: 01 F0 FC 00 01 F0 F8 00 01 F1 F0 00 01 F3 E0 00 
00F27E: 01 F7 E0 00 01 F7 C0 00 01 FF 80 00 01 FF C0 00 
00F28E: 01 F7 C0 00 01 F7 E0 00 01 F3 E0 00 01 F1 F0 00 
00F29E: 01 F1 F8 00 01 F0 F8 00 01 F0 7C 00 01 F0 7E 00 
00F2AE: 01 F0 3E 00 01 F0 1F 00 01 F0 1F 00 00 00 00 00 
00F2BE: 00 00 00 00 00 00 00 00 00 00 00 00 00 3E 00 00 
00F2CE: 00 3E 00 00 00 3E 00 00 00 3E 00 00 00 3E 00 00 
00F2DE: 00 3E 00 00 00 3E 00 00 00 3E 00 00 00 3E 00 00 
00F2EE: 00 3E 00 00 00 3E 00 00 00 3E 00 00 00 3E 00 00 
00F2FE: 00 3E 00 00 00 3E 00 00 00 3E 00 00 00 3E 00 00 
00F30E: 00 3E 00 00 00 3E 00 00 00 3F FE 00 00 3F FE 00 
00F31E: 00 3F FE 00 00 3F FE 00 00 00 00 00 00 00 00 00 
00F32E: 00 00 00 00 00 00 00 00 7F 80 07 F0 7F C0 0F F0 
00F33E: 7F C0 1F F0 7F C0 1F F0 7F E0 1F F0 7D E0 3D F0 
00F34E: 7D E0 3D F0 7D F0 3D F0 7C F0 79 F0 7C F0 79 F0 
00F35E: 7C F8 79 F0 7C F8 F1 F0 7C 78 F1 F0 7C 7C F1 F0 
00F36E: 7C 7D E1 F0 7C 3D E1 F0 7C 3F E1 F0 7C 3F C1 F0 
00F37E: 7C 1F C1 F0 7C 1F C1 F0 7C 1F 81 F0 7C 0F 81 F0 
00F38E: 7C 0F 81 F0 00 00 00 00 00 00 00 00 00 00 00 00 
00F39E: 00 00 00 00 07 E0 0F 00 07 F0 0F 00 07 F0 0F 00 
00F3AE: 07 F8 0F 00 07 F8 0F 00 07 BC 0F 00 07 BC 0F 00 
00F3BE: 07 9E 0F 00 07 9E 0F 00 07 8F 0F 00 07 8F 0F 00 
00F3CE: 07 87 8F 00 07 87 8F 00 07 83 CF 00 07 83 CF 00 
00F3DE: 07 81 EF 00 07 81 EF 00 07 80 EF 00 07 80 FF 00 
00F3EE: 07 80 7F 00 07 80 7F 00 07 80 3F 00 07 80 1F 00 
00F3FE: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
00F40E: 00 1F E0 00 00 7F FC 00 00 FF FE 00 01 FF FF 00 
00F41E: 03 F0 3F 80 07 E0 1F 80 07 C0 0F 80 07 C0 0F C0 
00F42E: 0F 80 07 C0 0F 80 07 C0 0F 80 07 C0 0F 80 07 C0 
00F43E: 0F 80 07 C0 0F 80 07 C0 0F 80 07 C0 0F C0 0F 80 
00F44E: 07 C0 0F 80 07 E0 1F 80 07 F0 3F 00 03 FF FE 00 
00F45E: 01 FF FC 00 00 FF F8 00 00 1F E0 00 00 00 00 00 
00F46E: 00 00 00 00 00 00 00 00 00 00 00 00 00 FF E0 00 
00F47E: 00 FF F8 00 00 FF FC 00 00 FF FE 00 00 F8 3F 00 
00F48E: 00 F8 1F 00 00 F8 1F 00 00 F8 1F 00 00 F8 1F 00 
00F49E: 00 F8 3F 00 00 F8 7E 00 00 FF FE 00 00 FF FC 00 
00F4AE: 00 FF F8 00 00 FF E0 00 00 F8 00 00 00 F8 00 00 
00F4BE: 00 F8 00 00 00 F8 00 00 00 F8 00 00 00 F8 00 00 
00F4CE: 00 F8 00 00 00 F8 00 00 00 00 00 00 00 00 00 00 
00F4DE: 00 00 00 00 00 00 00 00 00 3F C0 00 00 FF F8 00 
00F4EE: 03 FF FC 00 03 FF FE 00 07 E0 7F 00 0F C0 3F 00 
00F4FE: 0F 80 1F 00 1F 80 1F 80 1F 00 0F 80 1F 00 0F 80 
00F50E: 1F 00 0F 80 1F 00 0F 80 1F 00 0F 80 1F 00 0F 80 
00F51E: 1F 00 0F 80 1F 80 1F 00 0F 80 1F 00 0F C0 3F 00 
00F52E: 0F E0 7E 00 07 FF FC 00 03 FF FC 00 01 FF FF 00 
00F53E: 00 3F 9F 80 00 00 0F E0 00 00 07 E0 00 00 03 E0 
00F54E: 00 00 00 E0 01 FF E0 00 01 FF F8 00 01 FF FC 00 
00F55E: 01 FF FC 00 01 F0 7E 00 01 F0 3E 00 01 F0 3E 00 
00F56E: 01 F0 3E 00 01 F0 3E 00 01 F0 7C 00 01 FF FC 00 
00F57E: 01 FF F8 00 01 FF E0 00 01 FF F0 00 01 F1 F8 00 
00F58E: 01 F0 F8 00 01 F0 7C 00 01 F0 7C 00 01 F0 3E 00 
00F59E: 01 F0 3E 00 01 F0 3E 00 01 F0 1F 00 01 F0 1F 00 
00F5AE: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
00F5BE: 00 07 F0 00 00 1F FC 00 00 7F FC 00 00 7F FC 00 
00F5CE: 00 FC 0C 00 00 F8 00 00 00 F8 00 00 00 FC 00 00 
00F5DE: 00 FE 00 00 00 7F C0 00 00 3F F0 00 00 1F F8 00 
00F5EE: 00 07 FC 00 00 01 FE 00 00 00 7E 00 00 00 3E 00 
00F5FE: 00 00 3E 00 00 C0 3E 00 00 F0 7E 00 00 FF FC 00 
00F60E: 00 FF F8 00 00 7F F0 00 00 1F C0 00 00 00 00 00 
00F61E: 00 00 00 00 00 00 00 00 00 00 00 00 01 FF FF 00 
00F62E: 01 FF FF 00 01 FF FF 00 01 FF FF 00 00 07 C0 00 
00F63E: 00 07 C0 00 00 07 C0 00 00 07 C0 00 00 07 C0 00 
00F64E: 00 07 C0 00 00 07 C0 00 00 07 C0 00 00 07 C0 00 
00F65E: 00 07 C0 00 00 07 C0 00 00 07 C0 00 00 07 C0 00 
00F66E: 00 07 C0 00 00 07 C0 00 00 07 C0 00 00 07 C0 00 
00F67E: 00 07 C0 00 00 07 C0 00 00 00 00 00 00 00 00 00 
00F68E: 00 00 00 00 00 00 00 00 07 C0 1F 00 07 C0 1F 00 
00F69E: 07 C0 1F 00 07 C0 1F 00 07 C0 1F 00 07 C0 1F 00 
00F6AE: 07 C0 1F 00 07 C0 1F 00 07 C0 1F 00 07 C0 1F 00 
00F6BE: 07 C0 1F 00 07 C0 1F 00 07 C0 1F 00 07 C0 1F 00 
00F6CE: 07 C0 1F 00 07 C0 1F 00 07 C0 1F 00 07 E0 3F 00 
00F6DE: 03 F0 7E 00 03 FF FE 00 01 FF FC 00 00 FF F0 00 
00F6EE: 00 1F C0 00 00 00 00 00 00 00 00 00 00 00 00 00 
00F6FE: 00 00 00 00 07 C0 07 C0 07 E0 0F C0 03 E0 0F 80 
00F70E: 03 E0 0F 80 03 F0 1F 80 01 F0 1F 00 01 F0 1F 00 
00F71E: 01 F0 1F 00 00 F8 3E 00 00 F8 3E 00 00 F8 3E 00 
00F72E: 00 7C 7C 00 00 7C 7C 00 00 7C 78 00 00 3C 78 00 
00F73E: 00 3E F8 00 00 3E F0 00 00 1E F0 00 00 1F F0 00 
00F74E: 00 1F E0 00 00 0F E0 00 00 0F E0 00 00 0F C0 00 
00F75E: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
00F76E: F8 07 C0 3E FC 07 C0 7E 7C 07 E0 7C 7C 07 E0 7C 
00F77E: 7C 07 E0 7C 7E 0F E0 7C 3E 0F F0 78 3E 0E F0 F8 
00F78E: 3E 0E F0 F8 1E 1E F0 F8 1F 1E F8 F0 1F 1E 78 F0 
00F79E: 1F 1C 78 F0 0F 1C 79 F0 0F BC 7D E0 0F BC 3D E0 
00F7AE: 0F B8 3D E0 07 B8 3D E0 07 F8 3F C0 07 F8 1F C0 
00F7BE: 03 F8 1F C0 03 F0 1F C0 03 F0 1F 80 00 00 00 00 
00F7CE: 00 00 00 00 00 00 00 00 00 00 00 00 03 E0 3E 00 
00F7DE: 03 E0 3E 00 03 F0 7E 00 01 F0 7C 00 01 F8 FC 00 
00F7EE: 00 F8 F8 00 00 7D F0 00 00 7D F0 00 00 3F E0 00 
00F7FE: 00 3F E0 00 00 1F C0 00 00 1F C0 00 00 3F E0 00 
00F80E: 00 3F E0 00 00 7D F0 00 00 7D F0 00 00 F8 F8 00 
00F81E: 00 F8 F8 00 01 F0 7C 00 03 F0 7E 00 03 E0 3E 00 
00F82E: 07 E0 3F 00 07 C0 1F 00 00 00 00 00 00 00 00 00 
00F83E: 00 00 00 00 00 00 00 00 03 E0 3E 00 03 E0 3E 00 
00F84E: 03 F0 7E 00 01 F0 7C 00 01 F8 7C 00 00 F8 F8 00 
00F85E: 00 F8 F8 00 00 7D F0 00 00 7D F0 00 00 3D E0 00 
00F86E: 00 3F E0 00 00 1F C0 00 00 1F C0 00 00 0F 80 00 
00F87E: 00 0F 80 00 00 0F 80 00 00 0F 80 00 00 0F 80 00 
00F88E: 00 0F 80 00 00 0F 80 00 00 0F 80 00 00 0F 80 00 
00F89E: 00 0F 80 00 00 00 00 00 00 00 00 00 00 00 00 00 
00F8AE: 00 00 00 00 00 FF FE 00 00 FF FE 00 00 FF FE 00 
00F8BE: 00 FF FE 00 00 00 3E 00 00 00 7C 00 00 00 F8 00 
00F8CE: 00 00 F8 00 00 01 F0 00 00 03 E0 00 00 03 E0 00 
00F8DE: 00 07 C0 00 00 0F 80 00 00 0F 80 00 00 1F 00 00 
00F8EE: 00 3E 00 00 00 3E 00 00 00 7C 00 00 00 78 00 00 
00F8FE: 00 FF FF 00 00 FF FF 00 00 FF FF 00 00 FF FF 00 
00F90E: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 

00F91E: 00 00 7F 80 00 00 00 00 7F 80 00 00 00 00 FF C0 
00F92E: 00 00 00 01 FF C0 00 00 00 01 FF E0 00 00 00 03 
00F93E: FF E0 00 00 00 03 F7 F0 00 00 00 07 F7 F8 00 00 
00F94E: 00 07 E3 F8 00 00 00 0F E3 FC 00 00 00 0F C1 FC 
00F95E: 00 00 00 1F C1 FE 00 00 00 3F 80 FE 00 00 00 3F 
00F96E: 80 FF 00 00 00 7F 00 7F 80 00 00 7F 00 7F 80 00 
00F97E: 00 FE 00 3F C0 00 00 FE 00 1F C0 00 01 FC 00 1F 
00F98E: E0 00 03 FF FF FF E0 00 03 FF FF FF F0 00 07 FF 
00F99E: FF FF F8 00 07 FF FF FF F8 00 0F FF FF FF FC 00 
00F9AE: 0F FF FF FF FC 00 1F C0 00 01 FE 00 1F C0 00 01 
00F9BE: FE 00 3F 80 00 00 FF 00 7F 80 00 00 FF 80 7F 00 
00F9CE: 00 00 7F 80 FE 00 00 00 3F C0 3F 80 00 00 FE 00 
00F9DE: 3F 80 00 00 FE 00 3F 80 00 00 FE 00 3F 80 00 00 
00F9EE: FE 00 3F 80 00 00 FE 00 3F 80 00 00 FE 00 3F 80 
00F9FE: 00 00 FE 00 3F 80 00 00 FE 00 3F 80 00 00 FE 00 
00FA0E: 3F 80 00 00 FE 00 3F 80 00 00 FE 00 3F 80 00 00 
00FA1E: FE 00 3F FF FF FF FE 00 3F FF FF FF FE 00 3F FF 
00FA2E: FF FF FE 00 3F FF FF FF FE 00 3F FF FF FF FE 00 
00FA3E: 3F FF FF FF FE 00 3F 80 00 00 FE 00 3F 80 00 00 
00FA4E: FE 00 3F 80 00 00 FE 00 3F 80 00 00 FE 00 3F 80 
00FA5E: 00 00 FE 00 3F 80 00 00 FE 00 3F 80 00 00 FE 00 
00FA6E: 3F 80 00 00 FE 00 3F 80 00 00 FE 00 3F 80 00 00 
00FA7E: FE 00 3F 80 00 00 FE 00 3F 80 00 00 FE 00 3F 80 
00FA8E: 00 00 FE 00 0F FF FF FF E0 00 1F FF FF FF F8 00 
00FA9E: 3F FF FF FF FC 00 3F FF FF FF FC 00 7F FF FF FF 
00FAAE: FE 00 7F FF FF FF FE 00 7F 00 00 00 FE 00 7F 00 
00FABE: 00 00 FE 00 7F 00 00 00 FE 00 7F 00 00 00 FE 00 
00FACE: 7F 00 00 00 FE 00 7F 00 00 00 FE 00 7F 00 00 00 
00FADE: FE 00 7F 00 00 00 FE 00 7F 00 00 00 FE 00 7F 00 
00FAEE: 00 00 FE 00 7F 00 00 00 FE 00 7F 00 00 00 FE 00 
00FAFE: 7F 00 00 00 FE 00 7F 00 00 00 FE 00 7F 00 00 00 
00FB0E: FE 00 7F 00 00 00 FE 00 7F 00 00 00 FE 00 7F 00 
00FB1E: 00 00 FE 00 7F 00 00 00 FE 00 7F FF FF FF FE 00 
00FB2E: 7F FF FF FF FE 00 7F FF FF FF FE 00 3F FF FF FF 
00FB3E: FC 00 1F FF FF FF F8 00 0F FF FF FF F0 00 00 7F 
00FB4E: FF FF 80 00 01 FF FF FF E0 00 03 FF FF FF F0 00 
00FB5E: 03 FF FF FF F0 00 07 FF FF FF F8 00 07 FF FF FF 
00FB6E: F8 00 07 E0 00 01 F8 00 07 E0 00 01 F8 00 07 E0 
00FB7E: 00 01 F0 00 07 E0 00 01 80 00 07 E0 00 00 00 00 
00FB8E: 07 E0 00 00 00 00 07 FF FF FF C0 00 07 FF FF FF 
00FB9E: F0 00 07 FF FF FF F8 00 03 FF FF FF FC 00 03 FF 
00FBAE: FF FF FC 00 00 FF FF FF FC 00 00 00 00 00 FC 00 
00FBBE: 00 00 00 00 FC 00 00 00 00 00 FC 00 01 80 00 00 
00FBCE: FC 00 1F 80 00 00 FC 00 1F 80 00 00 FC 00 1F 80 
00FBDE: 00 00 FC 00 1F FF FF FF FC 00 1F FF FF FF FC 00 
00FBEE: 0F FF FF FF F8 00 0F FF FF FF F8 00 07 FF FF FF 
00FBFE: F0 00 01 FF FF FF C0 00 3F F0 00 00 FF 80 1F F8 
00FC0E: 00 01 FF 00 0F FC 00 03 FE 00 07 FE 00 07 FC 00 
00FC1E: 03 FE 00 07 F8 00 01 FF 00 0F F0 00 00 FF 80 1F 
00FC2E: E0 00 00 7F C0 3F C0 00 00 3F E0 7F 80 00 00 1F 
00FC3E: F0 FF 00 00 00 0F F9 FE 00 00 00 07 FF FC 00 00 
00FC4E: 00 03 FF F8 00 00 00 01 FF F0 00 00 00 00 FF E0 
00FC5E: 00 00 00 00 FF C0 00 00 00 00 7F 80 00 00 00 00 
00FC6E: 3F 80 00 00 00 00 3F 80 00 00 00 00 3F 80 00 00 
00FC7E: 00 00 3F 80 00 00 00 00 3F 80 00 00 00 00 3F 80 
00FC8E: 00 00 00 00 3F 80 00 00 00 00 3F 80 00 00 00 00 
00FC9E: 3F 80 00 00 00 00 3F 80 00 00 00 00 3F 80 00 00 
00FCAE: 00 00 3F 80 00 00 00 00 3F 80 00 00 00 00 3F 80 
00FCBE: 00 00 
